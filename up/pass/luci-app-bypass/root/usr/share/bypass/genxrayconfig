#!/usr/bin/lua

local ucursor = require "luci.model.uci".cursor()
local json = require "luci.jsonc"

local server_section = arg[1]
local proto = arg[2]
local local_port = arg[3] or "0"
local socks_port = arg[4] or "0"
local chain = arg[5] or "0"
local chain_local_port = string.split(chain, "/")[2] or "0"

local server = ucursor:get_all("bypass", server_section)
local outbound_settings = nil

local tls_host = (server.tls_host) and server.tls_host or server.server
ip_addr = server.server
function vmess_vless()
	outbound_settings = {
		vnext = {
			{
				address = ip_addr,
				port = tonumber(server.server_port),
				users = {
					{
						id = server.vmess_id,
						alterId = (server.v2ray_protocol == "vmess" or not server.v2ray_protocol) and tonumber(server.alter_id) or nil,
						security = (server.v2ray_protocol == "vmess" or not server.v2ray_protocol) and server.security or nil,
						encryption = (server.v2ray_protocol == "vless") and server.vless_encryption or nil,
						flow = ((server.tls == '1') or (server.reality == '1')) and server.tls_flow or nil
					}
				}
			}
		}
	}
end
function trojan_shadowsocks()
	outbound_settings = {
		servers = {
			{
				address = ip_addr,
				port = tonumber(server.server_port),
				password = server.password,
				method = ((server.v2ray_protocol == "shadowsocks") and server.encrypt_method_ss) or nil,
				uot = (server.v2ray_protocol == "shadowsocks") and (server.uot == '1') or nil,
				ivCheck = (server.v2ray_protocol == "shadowsocks") and (server.ivCheck == '1') or nil,
			}
		}
	}

end
function socks_http()
	outbound_settings = {
		version = server.socks_ver or nil,
		servers = {
			{
				address = ip_addr,
				port = tonumber(server.server_port),
				users = (server.auth_enable == "1") and {
					{
						user = server.username,
						pass = server.password
					}
				} or nil
			}
		}
	}
end
function wireguard()
	outbound_settings = {
		secretKey = server.private_key,
		address = ip_addr,
		peers = {
			{
				publicKey = server.peer_pubkey,
				preSharedKey = server.preshared_key,
				endpoint = ip_addr .. ":" .. server.server_port
			}
		},
		mtu = tonumber(server.mtu)
	}
end
local outbound = {}
function outbound:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end
function outbound:handleIndex(index)
	local switch = {
		vmess = function()
			vmess_vless()
		end,
		vless = function()
			vmess_vless()
		end,
		trojan = function()
			trojan_shadowsocks()
		end,
		shadowsocks = function()
			trojan_shadowsocks()
		end,
		socks = function()
			socks_http()
		end,
		http = function()
			socks_http()
		end,
		wireguard = function()
			wireguard()
		end
	}
	if switch[index] then
		switch[index]()
	end
end
local settings = outbound:new()
settings:handleIndex(server.v2ray_protocol)
local Xray = {
	-- 日志
	log = (server.custom_log == "1") and {
		loglevel = server.custom_loglevel, -- 日志级别
		dnsLog = (server.custom_dnsLog == "1") and true or false, -- DNS 查询记录
		access = server.custom_access, -- 访问记录
		error = server.custom_error -- 错误记录
	} or nil,
	-- DNS
	dns = {
		hosts = {
			["dns.alidns.com"] = "223.5.5.5",
			["doh.pub"] = "119.29.29.29"
		},
		servers = (server.custom_dns_enable == "1") and { -- Xray 内置 DNS
			server.custom_dns_local, -- 本地 DNS
			{
				address = server.custom_dns_remote, -- 远端 DNS
				domains = {
					server.custom_dns_remote_domains -- 远端 DNS 域名列表
				},
				skipFallback = true,
				queryStrategy = "UseIP"
			}
		} or nil,
		queryStrategy = "UseIP"
	},
	-- 路由
	routing = {
		domainStrategy = "AsIs",
		rules = {
			{
				type = "field",
				inboundTag = {
					"dns-in"
				},
				outboundTag = "dns-out"
			}
		}
	},
	-- 传入连接
	inbounds = {
	(local_port ~= "0") and {
		-- listening
		port = tonumber(local_port),
		protocol = "dokodemo-door",
		settings = {network = proto, followRedirect = true},
		sniffing = {
			enabled = (server.custom_sniffing == "1") and true or false, -- 流量嗅探
			routeOnly = (server.custom_routeOnly == "1") and true or false, -- 嗅探得到的域名仅用于 Xray 内部路由
			destOverride = {"http", "tls", "quic"},
			domainsExcluded = (server.custom_domainsExcluded == "1") and { -- 流量嗅探域名排除列表
				"courier.push.apple.com",
				"rbsxbxp-mim.vivox.com",
				"rbsxbxp.www.vivox.com",
				"rbsxbxp-ws.vivox.com",
				"rbspsxp.www.vivox.com",
				"rbspsxp-mim.vivox.com",
				"rbspsxp-ws.vivox.com",
				"rbswxp.www.vivox.com",
				"rbswxp-mim.vivox.com",
				"disp-rbspsp-5-1.vivox.com",
				"disp-rbsxbp-5-1.vivox.com",
				"proxy.rbsxbp.vivox.com",
				"proxy.rbspsp.vivox.com",
				"proxy.rbswp.vivox.com",
				"rbswp.vivox.com",
				"rbsxbp.vivox.com",
				"rbspsp.vivox.com",
				"rbspsp.www.vivox.com",
				"rbswp.www.vivox.com",
				"rbsxbp.www.vivox.com",
				"rbsxbxp.vivox.com",
				"rbspsxp.vivox.com",
				"rbswxp.vivox.com",
				"Mijia Cloud",
				"dlg.io.mi.com"
			} or nil,
		}
	} or nil,
	(server.custom_dns_enable == "1") and { -- Xray 内置 DNS
		port = 5335,
		protocol = "dokodemo-door",
		settings = {
			address = server.custom_dokodemo_door_dns_address, -- 查询非 A 和 AAAA 记录DNS
			port = 53,
			network = "udp"
		},
		tag = "dns-in"
	} or nil,
	},
	-- 开启 socks 代理
	inboundDetour = (proto:find("tcp") and socks_port ~= "0") and {
		{
			-- socks
			protocol = "socks",
			port = tonumber(socks_port),
			settings = {auth = "noauth", udp = true}
		}
	} or nil,
	-- 传出连接
	outbounds = {
	{
		tag = "proxy",
		protocol = server.v2ray_protocol,
		settings = outbound_settings,
		-- 底层传输配置
		streamSettings = {
			network = server.transport or "tcp",
			security = (server.tls == '1') and "tls" or (server.reality == '1') and "reality" or nil,
			tlsSettings = (server.tls == '1') and {
				-- tls
				alpn = server.tls_alpn,
				fingerprint = server.fingerprint,
				allowInsecure = (server.insecure == "1"),
				serverName = tls_host,
				certificates = server.certificate and {
					usage = "verify",
					certificateFile = server.certpath
				} or nil,
			} or nil,
			realitySettings = (server.reality == '1') and {
				publicKey = server.reality_publickey,
				shortId = server.reality_shortid,
				spiderX = server.reality_spiderx,
				fingerprint = server.fingerprint,
				serverName = tls_host
			} or nil,
			tcpSettings = (server.transport == "tcp" and server.tcp_guise == "http") and {
				-- tcp
				header = {
					type = server.tcp_guise,
					request = {
						-- request
						path = {server.http_path} or {"/"},
						headers = {Host = {server.http_host} or {}}
					}
				}
			} or nil,
			kcpSettings = (server.transport == "kcp") and {
				-- kcp
				mtu = tonumber(server.mtu),
				tti = tonumber(server.tti),
				uplinkCapacity = tonumber(server.uplink_capacity),
				downlinkCapacity = tonumber(server.downlink_capacity),
				congestion = (server.congestion == "1") and true or false,
				readBufferSize = tonumber(server.read_buffer_size),
				writeBufferSize = tonumber(server.write_buffer_size),
				header = {type = server.kcp_guise},
				seed = server.seed or nil
			} or nil,
			wsSettings = (server.transport == "ws") and (server.ws_path or server.ws_host or tls_host) and {
				-- ws
				headers = (server.ws_host or tls_host) and {
					-- headers
					Host = server.ws_host or tls_host
				} or nil,
				path = server.ws_path,
				maxEarlyData = tonumber(server.ws_ed) or nil,
				earlyDataHeaderName = server.ws_ed_header or nil
			} or nil,
			httpSettings = (server.transport == "h2") and {
				-- h2
				path = server.h2_path or "",
				host = {server.h2_host} or nil,
				read_idle_timeout = tonumber(server.read_idle_timeout) or nil,
				health_check_timeout = tonumber(server.health_check_timeout) or nil
			} or nil,
			quicSettings = (server.transport == "quic") and {
				-- quic
				security = server.quic_security,
				key = server.quic_key,
				header = {type = server.quic_guise}
			} or nil,
			grpcSettings = (server.transport == "grpc") and {
				-- grpc
				serviceName = server.serviceName or "",
				multiMode = (server.grpc_mode == "multi") and true or false,
				idle_timeout = tonumber(server.idle_timeout) or nil,
				health_check_timeout = tonumber(server.health_check_timeout) or nil,
				permit_without_stream = (server.permit_without_stream == "1") and true or nil,
				initial_windows_size = tonumber(server.initial_windows_size) or nil
			} or nil,
			sockopt = {
				tcpMptcp = (server.mptcp == "1") and true or false, -- MPTCP
				tcpNoDelay = (server.mptcp == "1") and true or false, -- MPTCP
				tcpcongestion = server.custom_tcpcongestion -- 连接服务器节点的 TCP 拥塞控制算法
			}
		},
		mux = {
			enabled = (server.mux == "1") and true or false, -- Mux
			concurrency = tonumber(server.concurrency), -- TCP 最大并发连接数
			xudpConcurrency = tonumber(server.xudpConcurrency), -- UDP 最大并发连接数
			xudpProxyUDP443 = server.xudpProxyUDP443 -- 对被代理的 UDP/443 流量处理方式
		}
	},
	{
		protocol = "freedom",
		settings = {
			domainStrategy = "ForceIPv6v4"
		},
		streamSettings = {
			sockopt = {
				tcpFastOpen = true
			}
		},
		tag = "direct"
	},
	{
		protocol = "blackhole",
		tag = "block"
	},
	(server.custom_dns_enable == "1") and { -- Xray 内置 DNS
		protocol = "dns",
		settings = {
			nonIPQuery = server.custom_nonIPQuery -- 非 A 和 AAAA 记录处理方式
		},
		proxySettings = (server.custom_nonIPQuery == "skip") and {
			tag = server.custom_nonIPQuery_outbound_tag -- 非 A 和 AAAA 记录查询方式
		} or nil,
		tag = "dns-out"
	} or nil,
	}
}
print(json.stringify(Xray, 1))


