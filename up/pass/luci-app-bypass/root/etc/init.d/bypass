#!/bin/sh /etc/rc.common

START=99
STOP=15

NAME=bypass
VAR=/tmp/etc/$NAME
FWI=$(uci -q get firewall.$NAME.path ) || FWI=$VAR.include
MAIN_FILE=/usr/share/${NAME}/main.sh
LOCK_FILE_DIR=/var/lock
LOCK_FILE=${LOCK_FILE_DIR}/${NAME}.lock

set_lock() {
	[ ! -d "$LOCK_FILE_DIR" ] && mkdir -p $LOCK_FILE_DIR
	exec 999>"$LOCK_FILE"
	flock -xn 999
}

unset_lock() {
	flock -u 999
	rm -rf "$LOCK_FILE"
}

unlock() {
	failcount=1
	while [ "$failcount" -le 10 ]; do
		if [ -f "$LOCK_FILE" ]; then
			let "failcount++"
			sleep 1s
			[ "$failcount" -ge 10 ] && unset_lock
		else
			break
		fi
	done
}

boot() {
	echo '#!/bin/sh' > $FWI
	local delay=$(uci -q get ${NAME}.@global[0].start_delay || echo 1)
	if [ "$delay" -gt 0 ]; then
		$MAIN_FILE elog "执行启动延时 $delay 秒后再启动!"
		sleep $delay
	fi
	restart
	touch ${LOCK_FILE_DIR}/${NAME}_ready.lock
}

start() {
	set_lock
	[ $? == 1 ] && $MAIN_FILE elog "脚本已经在运行，不重复运行，退出." && exit 0
	$MAIN_FILE start
	unset_lock
}

stop() {
	unlock
	set_lock
	[ $? == 1 ] && $MAIN_FILE elog "停止脚本等待超时，不重复运行，退出." && exit 0
	$MAIN_FILE stop
	unset_lock
}

restart() {
	set_lock
	[ $? == 1 ] && $MAIN_FILE elog "脚本已经在运行，不重复运行，退出." && exit 0
	$MAIN_FILE stop
	$MAIN_FILE start
	unset_lock
}
