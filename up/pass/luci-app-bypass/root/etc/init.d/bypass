#!/bin/sh /etc/rc.common
START=99
STOP=15
SERVICE_DAEMONIZE=1
NAME=bypass
VAR=/tmp/etc/bypass
FWI=$(uci -q get firewall.$NAME.path ) || FWI=$VAR.include
T_FILE=/etc/bypass
CRON_FILE=/etc/crontabs/root
LOCK=/tmp/lock/bypassboot.lock
LOC=/tmp/lock/bypass.lock
SDNS=/tmp/etc/smartdns
DNS_T=$SDNS/smartdns.conf
CON_T=$SDNS/rules.conf
CON_AD=$T_FILE/ad_smartdns.txt
PID=/tmp/run/smartdns.pid
LOG=/tmp/log/bypass.log

BIN_DIR=/usr/share/bypass
DNS_FILE=/tmp/dnsmasq.d/dnsmasq-by.conf
DNS_DIR=/tmp/dnsmasq.d/dnsmasq-by.d
O=$DNS_DIR/tmp
CRON="grep -q $BIN_DIR $CRON_FILE && sed -i '/\/share\/bypass/d' $CRON_FILE"
redir_tcp=0
kcp_enable=0
redir_udp=0
redir_nf=0
smartdns_flag=0
chinadns_flag=0
local_enable=0
switch_enable=0
switch_server=$1
server_count=0
STATUS=Y
tmp_tcp_local_port="306"   #tcp socks temporary port
uci_get_by_name() {
	local ret=$(uci get $NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_set_by_name() {
	uci set $NAME.$1.$2=$3 2>/dev/null
	uci commit $NAME
}
GLOBAL_SERVER=$(uci_get_by_type global global_server)
adguardhome=$(uci_get_by_type global adguardhome 0)
gfw_mode=$(uci_get_by_type global gfw_mode 1)
run_mode=$(uci_get_by_type global run_mode router)
SO_SERVER=$(uci_get_by_type socks5_proxy server 0)
[ $SO_SERVER = same ] && SO_SERVER=$GLOBAL_SERVER
[ $(uci_get_by_name $SO_SERVER server) ] || SO_SERVER=
dns_mode_d=$(uci_get_by_type global dns_mode_d doh)
socks5_ip=''
gen_log()(

	[ -s $LOG ] && echo -e '\n------------Start------------' >> $LOG
	log "Check network status."
)

log(){
	echo "$(date +'%Y-%m-%d %H:%M:%S') $*" >> $LOG
}

firstdown(){
	[ $1 = 1 ] && A=$BIN_DIR/checknetwork && B=check
	[ $1 = 2 ] && A=$BIN_DIR/update && B=--F
	service_start ${A} ${B}
}

clean_log() {
	[ `cat $LOG  | wc -l ` -gt 500 ] && {
		echo "$(date "+%Y-%m-%d %H:%M:%S") LOG long ,clear log!" >$LOG
	}
}
f_bin(){
	case $1 in
	ss) ret=$(which ss-redir);;
	ss-local) ret=$(which ss-local);;
	ss-server) ret=$(which ss-server);;
	ssr) ret=$(which ssr-redir);;
	ssr-local) ret=$(which ssr-local);;
	ssr-server) ret=$(which ssr-server);;
	v2ray) ret=$(which xray) || ret=$(which v2ray);;
	hysteria) ret=$(which hysteria);;
	trojan) ret=$(which trojan-plus);;
	naiveproxy) ret=$(which naive);;
	socks5|tun) ret=$(which redsocks2);;
	esac
	echo ${ret:=0}
}

v2txray() {

if [[ "$(grep "option uuid" /etc/config/bypass)" ]]; then
idsum=$(grep -c "config servers" /etc/config/bypass)
sed -i "s/option uuid/option vmess_id/" /etc/config/bypass
for i in $(seq 0 $((idsum-1)))
do
	if [ "$(uci -q get bypass.@servers[$i].type)" == 'vless' ];then
		uci -q set bypass.@servers[$i].type='v2ray'
		uci -q set bypass.@servers[$i].v2ray_protocol='vless'
	elif [ "$(uci -q get bypass.@servers[$i].type)" == 'vmess' ];then
		uci -q set bypass.@servers[$i].type='v2ray'
		uci -q set bypass.@servers[$i].v2ray_protocol='vmess'
	fi
done
uci commit bypass
fi
}

host_ip() {
	local host=$(uci_get_by_name $1 server)
	local ip=$host
	if [ -z "$(echo $host | grep -E "([0-9]{1,3}[\.]){3}[0-9]{1,3}")" ]; then
		if [ "$host" == "${host#*:[0-9a-fA-F]}" ]; then
			ip=$(resolveip -4 -t 3 $host | awk 'NR==1{print}')
			[ -z "$ip" ] && ip=$(wget -q -O- http://119.29.29.29/d?dn=$host | awk -F ';' '{print $1}')
		fi
	fi
	[ -z "$ip" ] || uci_set_by_name $1 ip $ip
	if [ -n "$ip" ] ;then
	  log "Rules      : Get $(uci_get_by_name $1 alias) ip:$ip success!" 
	else
	  log "Rules      : Unable to get server address.Check domain name!"
	  exit 1
	fi
	if [ "$ip" != "$host" ]; then
		grep -q "$host" "$DNS_FILE" 2>"/dev/null" || \
		echo -e "address=/$host/$ip" >> "$DNS_FILE"
	fi
	echo $ip
}

gen_config_file(){
	type=$(uci_get_by_name $1 type)
	rtype=$2
	ssport=$3
	serv_ip=$4
	sport=$(uci_get_by_name $1 server_port)
	pass=$(uci_get_by_name $1 password)
	timeout=$(uci_get_by_name $1 timeout 60)
	case $rtype in
	tcp)
		[ $kcp_enable = 1 ] && hostip=127.0.0.1 || hostip=$server;PROTO=redir;lport=$local_port;fname=retcp;;
	udp)
		hostip=$udp_server;PROTO=redir;lport=$udp_local_port;fname=reudp;;
	nf)
		hostip=$nf_ip;lport=$nf_local_port;fname=nf;;
	socks)
		hostip=$socks5_ip;lport=$socks5_port;PROTO=socks;fname=socks5;;
	esac
	[ $(uci_get_by_name $1 fast_open 0) = 1 ] && fast=true || fast=false;
	[ "$socks5_start" = 1 ] && config_file=$VAR/$type-by-$fname-socks5.json || config_file=$VAR/$type-by-$fname.json
	log_file=$VAR/$type-by-$fname.log
	case $type in
	ss)
		cat <<-EOF >$config_file
			{
			"server":"$hostip",
			"server_port":$sport,
			"local_address":"0.0.0.0",
			"local_port":$lport,
			"password":"$pass",
			"timeout":$timeout,
			"method":"$(uci_get_by_name $1 encrypt_method_ss)",
			"reuse_port":true,
			"fast_open":$fast
			}
		EOF
		plugin=$(uci_get_by_name $1 plugin 0)
		if [ $plugin != 0 -a -x "$(which $plugin)" ];then
			sed -i "s@$hostip\",@$hostip\",\n\"plugin\":\"$plugin\",\n\"plugin_opts\":\"$(uci_get_by_name $1 plugin_opts)\",@" $config_file
		fi
		;;
	ssr)
		cat <<-EOF >$config_file
			{
			"server":"$hostip",
			"server_port":$sport,
			"local_address":"0.0.0.0",
			"local_port":$lport,
			"password":"$pass",
			"timeout":$timeout,
			"method":"$(uci_get_by_name $1 encrypt_method)",
			"protocol":"$(uci_get_by_name $1 protocol)",
			"protocol_param":"$(uci_get_by_name $1 protocol_param)",
			"obfs":"$(uci_get_by_name $1 obfs)",
			"obfs_param":"$(uci_get_by_name $1 obfs_param)",
			"reuse_port":true,
			"fast_open":$fast
			}
		EOF
		;;
	naiveproxy)
		cat <<-EOF >$config_file
			{
			"listen":"$PROTO://0.0.0.0:$lport",
			"proxy":"https://$(uci_get_by_name $1 username):$pass@$(uci_get_by_name $1 server):$sport",
			"concurrency":"$threads"
			}
		EOF
		;;
	v2ray)
		[ $rtype = udp ] && smode=udp || smode=tcp
		[ $rtype = socks ] && lport=0
		lua $BIN_DIR/gen_config $1 $smode $lport $ssport $serv_ip >$config_file
		sed -i 's/\\//g' $config_file
		;;
 
	hysteria)
		lua $BIN_DIR/gen_config $1 $smode $lport $ssport >$config_file
		;;

	trojan)
		case $rtype in
		tcp|udp|nf) smode=nat;;
		socks) smode=client;;
		esac
		lua $BIN_DIR/gen_config $1 $smode $lport "" $serv_ip >$config_file
		sed -i 's/\\//g' $config_file
		;;
	esac
}

start_dns(){
	$(which smartdns) -c $DNS_T
	if [ $run_mode = router ];then
		service_start $(which chinadns-ng) -l 5337 -c '127.0.0.1#5336' -t '127.0.0.1#5335' -4 china_v4  -p 3 -6 china_v6 -f -n $([ $gfw_mode = 1 ] && echo -g $VAR/gfw.list)
		log "ChinaDNS : Start ChinaDNS-NG success!"
	fi
	if [[ "$(uci -q get dhcp.@dnsmasq[0].cachesize)" == "0" && $adguardhome == 0 ]]; then
		uci -q set dhcp.@dnsmasq[0].cachesize='1500'
		uci commit dhcp
	fi
}

preload(){
	if [ "$dns_a" = 1 -o "$dns_b" = 1 ];then
		[ "$dns_a" = 1 ] || doh_o_dom=
		[ "$dns_b" = 1 ] || doh_nf_dom=
		X=ns
		Y=$doh_o_dom
		Z=$doh_nf_dom
	elif [ $run_mode = all -a "$dns_c" = 1 ];then
		X=ns
		Y=$doh_d_dom
	fi
	service_start $BIN_DIR/by-preload $run_mode $X $Y $Z
}

check_net(){
	if ! curl -so /dev/null -m 3 www.baidu.com;then
		log "Rules     :Wait for network to connect..."
		/etc/init.d/dnsmasq restart
		$BIN_DIR/checknetwork check
		exit 0
	fi
}

get_soip(){
	if [ $SO_SERVER ];then
		if [ "$1" = 1 ];then
			cat $LOG 2>/dev/null | sed -n '$p' | grep -q 'Check network status...' || gen_log
			check_net
			cat $LOG 2>/dev/null | sed -n '$p' | grep -q 'Check network status successful!' || log "Rules      : Check network status successful!"
		fi
		socks5_ip=$(host_ip $SO_SERVER)
	fi
}

rules(){
	server=$(uci_get_by_name $GLOBAL_SERVER server)
	if [ ! $server ];then
		get_soip 1;return 1
	fi
	if ps -w | grep by-retcp | grep -v grep >/dev/null;then
		log "Rules     :Bypass has Started.";return 1
	fi
	cat $LOG 2>/dev/null | sed -n '$p' | grep -q 'Check network status.\|Download IP/GFW files.' || gen_log
	check_net
	cat $LOG 2>/dev/null | sed -n '$p' | grep -q 'Download IP/GFW files...' || (log "Rules      : Check network status successful!";log "Rules      : Check IP/GFW files...")
	[ ! -d $VAR  ] && mkdir -p $VAR
	[ ! -d /tmp/run ] &&  mkdir -p /tmp/run 
	[ ! -s $VAR/china.txt ] || [ ! -s $VAR/china_v6.txt ] || [ ! -s $VAR/gfw.list ] && {
		if [ ! -s $T_FILE/china.txt ] || [ ! -s $T_FILE/china_v6.txt ] || [ ! -s $T_FILE/gfw.list ] ;then
			log "Rules      : Download IP/GFW files."
			$BIN_DIR/update --f ;exit 0;
		else
			cp -f $T_FILE/*.txt $VAR
			cp -f $T_FILE/gfw.list $VAR
		fi
	}
	log "Rules      : Check IP/GFW files success!"
	kcp_enable=$(uci_get_by_name $GLOBAL_SERVER kcp_enable 0)
	UDP_RELAY_SERVER=$(uci_get_by_type global udp_relay_server)
	[ "$UDP_RELAY_SERVER" = same ] && UDP_RELAY_SERVER=$GLOBAL_SERVER
	if [ "$(uci_get_by_name $UDP_RELAY_SERVER kcp_enable 0)" = 1 ];then
		log "UDP Node: Can't use KCPTUN to start as UDP Relay Server!"
		UDP_RELAY_SERVER=
	fi
	NF_SERVER=$(uci_get_by_type global nf_server)
	[ "$NF_SERVER" = $GLOBAL_SERVER ] && NF_SERVER=
	server=$(host_ip $GLOBAL_SERVER)
	
	local_port=$(uci_get_by_name $GLOBAL_SERVER local_port 1234)
	lan_ac_ips=$(uci_get_by_type access_control lan_ac_ips)
	lan_ac_mode=$(uci_get_by_type access_control lan_ac_mode b)
	if [ $GLOBAL_SERVER = "$UDP_RELAY_SERVER" ];then
		UDP=1
		udp_server=$server
		udp_local_port=$local_port
	elif [ -n "$UDP_RELAY_SERVER" ];then
		udp_server=$(host_ip $UDP_RELAY_SERVER)
		udp_local_port=$(uci_get_by_name $UDP_RELAY_SERVER local_port 1234)
		UDP=1
	fi

	ttype=$(uci_get_by_name $GLOBAL_SERVER type)
	utype=$(uci_get_by_name $UDP_RELAY_SERVER type)
	if [ "$UDP" = 1 ];then
		[ $ttype = trojan -o $utype = trojan ] && [ $udp_local_port = $local_port ] && let udp_local_port=local_port+1;UDP="-S $udp_server -L $udp_local_port"
	fi

	case $run_mode in
		router)mode=-r;;
		oversea)mode=-c;;
		all)mode=-z;;
	esac

	[ $kcp_enable = 1 ] && kcp_server=$server
	if [ -n "$NF_SERVER" -a $run_mode != oversea ];then
		nf_ip=$(host_ip $NF_SERVER)

		ntype=$(uci_get_by_name $NF_SERVER type)
		nf_local_port=$(uci_get_by_name $NF_SERVER local_port 1234)
		[ $nf_local_port = $local_port ] && let nf_local_port=local_port+1
		[ "$utype" = trojan -o $ntype = trojan ] && [ $nf_local_port = "$udp_local_port" ] && let nf_local_port=nf_local_port+1
		NF=1
	fi
	[ "$NF" = 1 ] && NF="-N $nf_ip -P $nf_local_port"
	get_soip
	log "Rules      : Get all server address successful!"
	if [ -n "$lan_ac_ips" ];then
		case $lan_ac_mode in
			w|W|b|B)local ac_ips="$lan_ac_mode$lan_ac_ips";;
		esac
	fi

	dports=$(uci_get_by_type global dports 1)
	if [ $dports = 2 ];then
		proxyport="-m multiport --dports 22,53,587,465,995,993,143,80,443,853,9418"
	fi

	r=1
	while ! $BIN_DIR/by-rules -s "$server" -l "$local_port" -a "$ac_ips" -b "$(uci_get_by_type access_control wan_bp_ips)" -w "$(uci_get_by_type access_control wan_fw_ips)" \
		-p "$(uci_get_by_type access_control lan_fp_ips)" -G "$(uci_get_by_type access_control lan_gm_ips)" -D "$proxyport" $mode $UDP $NF;do
		[ $r -ge 20 ] && log "Rules      : Start iptables rules failed!" && return 1
		let r++;sleep 1
	done
	log "Rules      : Start $run_mode iptables rules success!"
}

start_retcp(){
	rtype=tcp
	if [ $kcp_enable = 1 ];then
		cmd=$(which kcptun-client) || cmd=0
		[ ! $cmd ] && 	log "Main Node: Can't find KCPTUN program, start failed!" && return 1

		[ $($cmd -v 2>/dev/null | grep kcptun | wc -l) = 0 ] && return 1
		kcp_port=$(uci_get_by_name $GLOBAL_SERVER kcp_port)
		server_port=$(uci_get_by_name $GLOBAL_SERVER server_port)
		password=$(uci_get_by_name $GLOBAL_SERVER kcp_password)
		kcp_param=$(uci_get_by_name $GLOBAL_SERVER kcp_param)
		[ -n "$password" ] && password="--key "${password}
		service_start $cmd -r $kcp_server:$kcp_port -l :$server_port $password $kcp_param
	fi
	threads=$(uci_get_by_type global threads 0)
	[ $threads = 0 ] && threads=$(cat /proc/cpuinfo | grep 'processor' | wc -l)
	cmd=$(f_bin $ttype)
	[ ! $cmd ] && log "Main Node: Can't find $(echo $ttype | tr a-z A-Z) program, start failed!"  && return 1
	redir_tcp=1
	case $ttype in
	ss|ssr)
		gen_config_file $GLOBAL_SERVER $rtype
		redir_tcp=$threads
		for i in $(seq 1 $threads);do
			$cmd -c $config_file >$log_file 2>&1 &
		done
		[ $ttype = ss ] && name=Shadowsocks || name=ShadowsocksR
		log "Main Node: $name $threads Threads Started!"
		;;
	v2ray)
		if [ $SO_SERVER = $GLOBAL_SERVER ];then
			port=$(uci_get_by_type socks5_proxy local_port 1080)
			socks5_start=1
		else
			port=0
		fi
		gen_config_file $GLOBAL_SERVER $rtype $port $server
		$cmd run -c $config_file >$log_file 2>&1 &
		log "Main Node: $($cmd -version | head -1 | awk '{print$1,$2}') Started!"
		if [ "$socks5_start" = 1 ];then
			log "Socks5 Node: $($cmd -version | head -1 | awk '{print$1,$2}') $ttype Started!"
		fi
		;;
	hysteria)
		if [ $SO_SERVER = $GLOBAL_SERVER ];then
			port=$(uci_get_by_type socks5_proxy local_port 1080)
			socks5_start=1
		else
			port=0
		fi
		gen_config_file $GLOBAL_SERVER $rtype $port $server
		$cmd -c $config_file >$log_file 2>&1 &

		log "Main Node: $($cmd -version | head -1 | awk '{print$1,$2}') Started!"
		if [ "$socks5_start" = 1 ];then
			log "Socks5 Node: $($cmd -version | head -1 | awk '{print$1,$2}') $ttype Started!"
		fi
		;;
	trojan)
		gen_config_file $GLOBAL_SERVER $rtype "" $server
		redir_tcp=$threads
		for i in $(seq 1 $threads);do
			$cmd --config $config_file >$log_file 2>&1 &
		done
		name=Trojan-Plus
		ver="$($cmd --version 2>&1 | head -1 | awk '{print$3}')"
		log "Main Node: $name (Ver $ver) $threads Threads Started!"
		;;
	naiveproxy)
		gen_config_file $GLOBAL_SERVER $rtype
		$cmd --config $config_file >$log_file 2>&1 &
		log "Main Node: $($cmd --version | head -1) Threads Started!"
		;;
	socks5)
		redir_tcp=$threads
		$BIN_DIR/genred2config $VAR/redsocks-by-retcp.json socks5 tcp $local_port $server $(uci_get_by_name $GLOBAL_SERVER server_port) \
		$(uci_get_by_name $GLOBAL_SERVER auth_enable 0) $(uci_get_by_name $GLOBAL_SERVER username) $(uci_get_by_name $GLOBAL_SERVER password)
		for i in $(seq 1 $threads);do
			$cmd -c $VAR/redsocks-by-retcp.json >$log_file 2>&1
		done
		log "Main Node: Socks5 $threads Threads Started!"
		;;
	tun)
		redir_tcp=$threads
		$BIN_DIR/genred2config $VAR/redsocks-by-retcp.json vpn $(uci_get_by_name $GLOBAL_SERVER iface br-lan) $local_port
		for i in $(seq 1 $threads);do
			$cmd -c $VAR/redsocks-by-retcp.json >$log_file 2>&1
		done
		log "Main Node: Network Tunnel $threads Threads Started!"
		;;
	esac
	log "Main Node: Main Server $(uci_get_by_name $GLOBAL_SERVER alias)  Started!"
}

start_reudp(){
	rtype=udp
	cmd=$(f_bin $utype)
	if [ ! -x $cmd ];then
		log "UDP Node: Can't find $(echo $utype | tr a-z A-Z) program, start failed!"
		return 1
	fi
	redir_udp=1
	case $utype in
	ss|ssr)
		gen_config_file $UDP_RELAY_SERVER $rtype
		$cmd -c $config_file -U >$log_file 2>&1 &
		[ $utype = ss ] && name=Shadowsocks || name=ShadowsocksR
		log "UDP Node: $name  $utype Started!"
		;;
	v2ray)
		gen_config_file $UDP_RELAY_SERVER $rtype 0 $udp_server
		$cmd  run -c $config_file >$log_file 2>&1 &
		log "UDP Node: $($cmd -version | head -1 | awk '{print$1,$2}') $utype Started!"
		;;
	trojan)
		gen_config_file $UDP_RELAY_SERVER $rtype "" $udp_server
		$cmd --config $config_file >$log_file 2>&1 &
		name=Trojan-Plus
		ver="$($cmd --version 2>&1 | head -1 | awk '{print$3}')"
		log "UDP Node: $name (Ver $ver) $utype Started!"
		;;
	naiveproxy)
		gen_config_file $UDP_RELAY_SERVER $rtype
		redir_udp=0
		log "$($cmd --version | head -1) UDP Relay $utype not supported!"
		;;

	hysteria)
	
		gen_config_file $UDP_RELAY_SERVER $rtype 0 $udp_server
		$cmd -c $config_file >$log_file 2>&1 &
		log "UDP Node: $($cmd -version | head -1 | awk '{print$1,$2}') $utype Started!"
		;;
	socks5)
		$BIN_DIR/genred2config $VAR/redsocks-by-reudp.json socks5 udp $udp_local_port $udp_server \
		$(uci_get_by_name $UDP_RELAY_SERVER server_port) $(uci_get_by_name $UDP_RELAY_SERVER auth_enable 0) $(uci_get_by_name $UDP_RELAY_SERVER username) $(uci_get_by_name $UDP_RELAY_SERVER password)
		$cmd --config $VAR/redsocks-by-reudp.json >$log_file 2>&1
		log "UDP Node: Socks5 Started!"
		;;
	tun)
		redir_udp=0
		log "Network Tunnel UDP Relay $utype not supported!"
		;;
	esac
	log "UDP Node: UDP Server $(uci_get_by_name  $UDP_RELAY_SERVER alias)  Started!"
}

start_renf(){
	rtype=nf
	cmd=$(f_bin $ntype)
	if [ ! -x $cmd ];then
		log "NF Shunt : Can't find $(echo $ntype | tr a-z A-Z) program, start failed!"
		return 1
	fi
	redir_nf=1
	case $ntype in
	ss|ssr)
		gen_config_file $NF_SERVER $rtype
		$cmd -c $config_file >$log_file 2>&1 &
		[ $ntype = ss ] && name=Shadowsocks || name=ShadowsocksR
		log "NF  Shunt : $name $ntype Started!"
		;;
	v2ray)
		gen_config_file $NF_SERVER $rtype 0 $nf_ip
		$cmd run -c $config_file >$log_file 2>&1 &
		log "NF  Shunt : $($cmd -version | head -1 | awk '{print$1,$2}') $ntype Started!"
		;;
	hysteria)
		gen_config_file $NF_SERVER $rtype 0 $nf_ip
		$cmd -c $config_file >$log_file 2>&1 &
		log "NF  Shunt : $($cmd -version | head -1 | awk '{print$1,$2}') $ntype Started!"
		;;
	trojan)
		gen_config_file $NF_SERVER $rtype "" $nf_ip
		$cmd --config $config_file >$log_file 2>&1 &
		[ $ntype = trojan ] && {
			name=Trojan-Plus
			ver="$($cmd --version 2>&1 | head -1 | awk '{print$3}')"
		}
		log "NF  Shunt : $name (Ver $ver) $ntype Started!"
		;;
	naiveproxy)
		gen_config_file $NF_SERVER $rtype
		$cmd --config $config_file >$log_file 2>&1 &
		log "NF  Shunt : $($cmd --version | head -1) $ntype Started!"
		;;
	socks5)
		$BIN_DIR/genred2config $VAR/redsocks-by-nf.json socks5 tcp $nf_local_port $nf_ip $(uci_get_by_name $NF_SERVER server_port) \
		$(uci_get_by_name $NF_SERVER auth_enable 0) $(uci_get_by_name $NF_SERVER username) $(uci_get_by_name $NF_SERVER password)
		$cmd -c $VAR/redsocks-by-nf.json >>$log_file 2>&1
		log "NF  Shunt : $ntype Started!"
		;;
	tun)
		$BIN_DIR/genred2config $VAR/redsocks-by-nf.json vpn $(uci_get_by_name $NF_SERVER iface "br-lan") $nf_local_port
		$cmd -c $VAR/redsocks-by-nf.json >$log_file 2>&1
		log "NF  Shunt : Network Tunnel REDIRECT $ntype Started!"
		;;
	esac
	log "NF  Shunt : NF Server $(uci_get_by_name $NF_SERVER alias) $ntype Started!"
}

start_local(){
	rtype=socks
	[ $SO_SERVER = 0 -o "$socks5_start" = 1 ] && return
	type=$(uci_get_by_name $SO_SERVER type)
	[ $type = ss -o $type = ssr ] && cmd=$(f_bin $type-local) || cmd=$(f_bin $type)
	if [ ! -x $cmd ];then
		log "Socks5 Node: Can't find $(echo $type | tr a-z A-Z) program, start failed!";return 1
	fi
	socks5_port=$(uci_get_by_type socks5_proxy local_port 1080)
	local_enable=1
	[ ! -d $VAR ] && mkdir -p $VAR
	case $type in
	ss|ssr)
		gen_config_file $SO_SERVER $rtype
		$cmd -c $config_file -u >$log_file 2>&1 &
		[ $type = ss ] && name=Shadowsocks || name=ShadowsocksR
		log "Socks5 Node: $name $type Started!"
		;;
	v2ray)
		gen_config_file $SO_SERVER $rtype $socks5_port $socks5_ip
		$cmd run -c $config_file >$log_file 2>&1 &
		log "Socks5 Node: $($cmd -version | head -1 | awk '{print$1,$2}') $type Started!"
		;;
	hysteria)
		gen_config_file $SO_SERVER $rtype $socks5_port $socks5_ip
		$cmd -c $config_file >$log_file 2>&1 &
		log "Socks5 Node: $($cmd -version | head -1 | awk '{print$1,$2}') $type Started!"
		;;
	trojan)
		gen_config_file $SO_SERVER $rtype "" $socks5_ip
		$cmd --config $config_file >$log_file 2>&1 &
		[ $type = trojan ] && {
			name=Trojan-Plus
			ver="$($cmd --version 2>&1 | head -1 | awk '{print$3}')"
		}
		log "Socks5 Node: $name (Ver $ver) $type Started!"
		;;
	naiveproxy)
		gen_config_file $SO_SERVER $rtype
		$cmd --config $config_file >$log_file 2>&1 &
		log "Socks5 Node: $($cmd --version | head -1) $type Started!"
		;;
	esac
	ipset add ss_spec_wan_ac $socks5_ip >/dev/null 2>&1 &
	log "Socks5 Node: Socks5 Server $(uci_get_by_name $SO_SERVER alias) Started!"
}

gen_dns(){
	dns_mode_o=$(uci_get_by_type global dns_mode_o doh)
	if [ $dns_mode_o = "doh" ];then
		doh_dns_o=$(uci_get_by_type global doh_dns_o cloudflare)
		log "SmartDNS : Use $doh_dns_o to start in $dns_mode_o mode (Foreign DNS)"
		case $doh_dns_o in
		cloudflare)
			doh_o="https://104.16.249.249/dns-query -tls-host-verify cloudflare-dns.com -http-host cloudflare-dns.com,https://104.16.132.229/dns-query -tls-host-verify *.cloudflare.com -http-host dns.cloudflare.com,https://1.1.1.1/dns-query -tls-host-verify *.cloudflare.com -http-host dns.cloudflare.com"
			dns="104.16.249.249 104.16.132.229 1.0.0.1 1.1.1.1 2606:4700:4700::1111 2606:4700:4700::1001"
			;;
		google)
			doh_o="https://8.8.4.4/dns-query -tls-host-verify dns.google -http-host dns.google,https://8.8.8.8/dns-query -tls-host-verify dns.google -http-host dns.google"
			dns="8.8.4.4 8.8.8.8 2001:4860:4860::8888 2001:4860:4860::8844"
			;;
		quad9)
			doh_o="https://9.9.9.9/dns-query -tls-host-verify *.quad9.net -http-host dns.quad9.net,https://149.112.112.112/dns-query -tls-host-verify *.quad9.net -http-host dns.quad9.net"
			dns="9.9.9.9 149.112.112.112 2620:fe::fe 2620:fe::fe:9"
			;;
		opendns)
			doh_o="https://146.112.41.2/dns-query -tls-host-verify doh.opendns.com -http-host doh.opendns.com"
			dns="208.67.222.222 208.67.220.220 2620:119:35::35 2620:119:53::53"
			;;
		quad101tw)
			doh_o="https://101.101.101.101/dns-query -tls-host-verify dns.twnic.tw -http-host dns.twnic.tw"
			dns="101.101.101.101 101.102.103.104 2001:de4::101 2001:de4::102"
			;;
		tiardns)
			doh_o="https://172.67.173.59/dns-query -tls-host-verify *.tiarap.org -http-host doh.tiarap.org,https://174.138.29.175/dns-query -tls-host-verify *.tiar.app -http-host doh.tiar.app"
			dns="174.138.21.128 172.67.173.59 174.138.29.175 2400:6180:0:d0::5f6e:4001"   
			;;
		tiardnsjp)
			doh_o="https://104.21.30.162/dns-query -tls-host-verify *.tiarap.org -http-host jp.tiarap.org,https://172.104.93.80/dns-query -tls-host-verify *.tiar.app -http-host jp.tiar.app"
			dns="104.21.30.162 172.104.93.80 2400:8902::f03c:91ff:feda:c514"
			;;
		blahdnsgermany)
			doh_o="https://78.46.244.143/dns-query -tls-host-verify doh-de.blahdns.com -http-host doh-de.blahdns.com,https://doh-de.blahdns.com/dns-query -tls-host-verify doh-de.blahdns.com -http-host doh-de.blahdns.com"
			dns="78.46.244.143 159.69.198.101 2a01:4f8:1c1c:6b4b::1"
			;;
		ahadnsny)
			doh_o="https://185.213.26.187/dns-query -tls-host-verify doh.ny.ahadns.net -http-host doh.ny.ahadns.net,https://doh.ny.ahadns.net/dns-query -tls-host-verify doh.ny.ahadns.net -http-host doh.ny.ahadns.net"
			dns="185.213.26.187 2a0d:5600:33:3::3"
			;;
		*)
			doh_o=$(echo $doh_dns_o | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g')
			dns=$(echo $doh_dns_o | sed 's/,/\n/g' | awk '-F[/:]' '{print$4}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$")

			if [ -z "$dns" ];then
				dns="1.0.0.1 1.1.1.1"
			fi;;
		esac
		dns_a=1
		for i in $dns;do
			case $run_mode in
			gfw|oversea) ipset add blacklist $i 2>/dev/null;;
			*) ipset del ss_spec_wan_ac $i 2>/dev/null || ipset add ss_spec_wan_ac $i nomatch 2>/dev/null;;
			esac
		done
		[ -n "$NF" ] && doh_dns_nf=google
		if [ "$doh_dns_nf" = $doh_dns_o ];then
			doh_dns_nf=cloudflare
		fi
		if [ -n "$NF" ];then
			case $doh_dns_nf in
			cloudflare)
				doh_nf="https://cloudflare-dns.com/dns-query"
				dns_nf="1.0.0.1 1.1.1.1";;
			google)
				doh_nf="https://dns.google/dns-query"
				dns_nf="8.8.4.4 8.8.8.8";;
			esac
			dns_b=1
			for i in $dns_nf;do ipset add netflix $i 2>/dev/null;done
		fi
	else
		dot_dns_o=$(uci_get_by_type global dot_dns_o cloudflare)
		log "SmartDNS : Use $dot_dns_o to start in $dns_mode_o mode (Foreign DNS)"
		case $dot_dns_o in
		cloudflare)
			dot_o="1.0.0.1:853 -host-name 1dot1dot1dot1.cloudflare-dns.com,1.1.1.1:853 -host-name 1dot1dot1dot1.cloudflare-dns.com,1dot1dot1dot1.cloudflare-dns.com:853"
			dns="1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001"
			;;
		google)
			dot_o="8.8.4.4:853 -host-name dns.google ,8.8.8.8:853 -host-name dns.google,dns.google:853"
			dns="8.8.4.4 8.8.8.8 2001:4860:4860::8888 2001:4860:4860::8844"
			;;
		quad9)
			dot_o="9.9.9.9:853 -host-name dns.quad9,149.112.112.112:853 -host-name dns.quad9.net,dns.quad9.net:853"
			dns="9.9.9.9 149.112.112.112 2620:fe::fe 2620:fe::fe:9"
			;;

		quad101tw)
			dot_o="101.101.101.101:853 -host-name dns.twnic.tw,dns.twnic.tw:853"
			dns="101.101.101.101 101.102.103.104 2001:de4::101 2001:de4::102"
			;;
		tiardns)
			dot_o="174.138.29.175:853 -host-name dot.tiar.app,dot.tiar.app:853"
			dns="174.138.29.175 174.138.21.128 2400:6180:0:d0::5f6e:4001"   
			;;
		tiardnsjp)
			dot_o="172.104.93.80:853 -host-name jp.tiar.app,jp.tiar.app:853"
			dns="172.104.93.80 104.21.30.162 2400:8902::f03c:91ff:feda:c514"
			;;
		blahdnsgermany)
			dot_o="78.46.244.143:853 -host-name dot.in.ahadns.net,dot-de.blahdns.com:853"
			dns="78.46.244.143 159.69.198.101 2400:8904:e001:43::43"
			;;
		ahadnsny)
			dot_o="185.213.26.187:853 -host-name dot.ny.ahadns.net,dot.ny.ahadns.net:853"
			dns="185.213.26.187 2a0d:5600:33:3::3"
			;;
		*)
			dot_o=$(echo $doh_dns_o | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g')
			dns=$(echo $doh_dns_o | sed 's/,/\n/g' | awk '-F[/:]' '{print$4}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$")

			if [ -z "$dns" ];then
				dns="1.1.1.1 1.0.0.1"
			fi;;
		esac
		dns_a2=1
		for i in $dns;do
			case $run_mode in
			gfw|oversea) ipset add blacklist $i 2>/dev/null;;
			*) ipset del ss_spec_wan_ac $i 2>/dev/null || ipset add ss_spec_wan_ac $i nomatch 2>/dev/null;;
			esac
		done
		[ -n "$NF" ] && dot_dns_nf=google
		if [ "$dot_dns_nf" = $dot_dns_o ];then
			dot_dns_nf=cloudflare
		fi
		if [ -n "$NF" ];then
			case $dot_dns_nf in
			cloudflare)
				dot_nf="1dot1dot1dot1.cloudflare-dns.com:853"
				dns_nf="1.0.0.1 1.1.1.1"
				;;
			google)
				dot_nf="dns.google:853"
				dns_nf="8.8.4.4 8.8.8.8"
				;;
			esac
	        for i in $dns_nf;do ipset add netflix $i 2>/dev/null;done
		dns_b2=1
		fi
	
	fi

	if [ $dns_mode_d = "doh" ];then
		doh_dns_d=$(uci_get_by_type global doh_dns_d alidns)
		log "SmartDNS : Use $doh_dns_d start in $dns_mode_d mode (Domestic DNS)"
		case $doh_dns_d in
		alidns)
			doh_d="https://223.5.5.5/dns-query -tls-host-verify *.alidns.com -http-host dns.alidns.com,https://223.6.6.6/dns-query -tls-host-verify *.alidns.com -http-host dns.alidns.com,https://[2400:3200::1]/dns-query -tls-host-verify *.alidns.com -http-host dns.alidns.com,https://[2400:3200:baba::1]/dns-query -tls-host-verify *.alidns.com -http-host dns.alidns.com"
			dns_d="223.5.5.5 223.6.6.6 2400:3200::1 2400:3200:baba::1"
			;;
		dnspod)
			doh_d="https://175.24.219.66/dns-query -tls-host-verify *.doh.pub -host-name doh.pub -http-host doh.pub,https://162.14.21.178/dns-query -tls-host-verify *.doh.pub -host-name doh.pub -http-host doh.pub"
			dns_d="119.29.29.29 175.24.219.66 119.28.28.28 162.14.21.178"
			;;
		360DNS)
			doh_d="https://101.198.191.4/dns-query -tls-host-verify *.360.cn -host-name doh.360.cn -http-host doh.360.cn,https://doh.360.cn/dns-query -tls-host-verify *.360.cn -host-name doh.360.cn -http-host doh.360.cn"
			dns_d="101.226.4.6 101.198.191.4"
			;;
		*)
			doh_d=$(echo $doh_dns_d | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
			dns_d=$(echo $doh_dns_d | awk '-F[/:]' '{print$4}')
			dns_d=$(echo $dns_d | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
			if [ -z "$dns_d" ];then
				dns_d="223.5.5.5 223.6.6.6 2400:3200::1 2400:3200:baba::1"
			fi;;
		esac
		dns_c=1
	elif  [ $dns_mode_d = "dot" ];then
		dot_dns_d=$(uci_get_by_type global dot_dns_d alidns)
		log "SmartDNS : Use $dot_dns_d start in $dns_mode_d mode (Domestic DNS)"
		case $dot_dns_d in
		alidns)
			dot_d="223.5.5.5:853 -host-name dns.alidns.com ,223.6.6.6:853 -host-name dns.alidns.com,dns.alidns.com:853"
			dns_d="223.5.5.5 223.6.6.6 2400:3200::1 2400:3200:baba::1"
			;;
		dnspod)
			dot_d="1.12.12.12:853 -host-name doh.pub,dot.pub:853"
			dns_d="119.29.29.29 1.12.12.12"
			;;
		360DNS)
			dot_d="23.6.48.18:853 -host-name dot.360.cn,180.163.249.75:853 -host-name dot.360.cn,dot.360.cn:853"
			dns_d="101.226.4.6 123.6.48.18"
			;;
		*)
			dot_d=$(echo $doh_dns_d | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
			dns_d=$(echo $doh_dns_d | awk '-F[/:]' '{print$4}')
			dns_d=$(echo $dns_d | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
			if [ -z "$dns_d" ];then
				dns_d="223.5.5.5,223.6.6.6,2400:3200::1,2400:3200:baba::1"
			fi;;
		esac
		dns_c2=1
	else
		udp_dns_d=$(uci_get_by_type global udp_dns_d 223.5.5.5,223.6.6.6)
		log "SmartDNS : Use $udp_dns_d start in $dns_mode_d mode (Domestic DNS)"
		if [ "$udp_dns_d" = "isp" ];then 
			ref=/tmp/resolv.conf.d/resolv.conf.auto
			[ -s $ref ] || ref=/tmp/resolv.conf.auto
			udp_dns_d=$(cat $ref 2>/dev/null | grep nameserver | awk '{print$2}')

			[ ! "$udp_dns_d" ] && log "SmartDNS : Get isp $udp_dns_d Domestic DNS failed!" && return 1
		fi
		udp_d=$(echo $udp_dns_d | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
		dns_d=$(echo $udp_dns_d | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
	fi
	smartdns_flag=1
	ipv6mode=$(uci_get_by_type global proxy_ipv6_mode 1)
	mkdir -p /tmp/run /tmp/dnsmasq.d $SDNS $DNS_DIR
	cat >$DNS_T <<-EOF
		speed-check-mode tcp:443,tcp:80,ping
		cache-persist yes
		cache-checkpoint-time 120
		force-qtype-SOA 65
		prefetch-domain yes
		serve-expired yes
		cache-size 32768
		log-level fatal
		log-file $LOG
		max-reply-ip-num 3
		cache-file /tmp/bysmartdns.cache
	EOF
	case $ipv6mode in
		 1)   
		        echo "force-AAAA-SOA yes" >> $DNS_T
			echo "dualstack-ip-selection no" >> $DNS_T
			# echo "force-qtype-SOA 28" >> $DNS_T
			BIND="bind "
			BINDIPV6=" -force-aaaa-soa -no-dualstack-selection -no-rule-soa"
			;;
		 2)
		        echo "force-AAAA-SOA no" >> $DNS_T
			echo "dualstack-ip-selection yes" >> $DNS_T
			echo "dualstack-ip-selection-threshold 100" >> $DNS_T
			BINDIPV6=" "
			BIND="bind [::]"
			;;
		 3)
		        echo "force-AAAA-SOA no" >> $DNS_T
			echo "dualstack-ip-selection no" >> $DNS_T
			echo "dualstack-ip-allow-force-AAAA yes" >> $DNS_T
			# echo "force-qtype-SOA 1" >> $DNS_T
			BIND="bind [::]"
			BINDIPV6=" -no-dualstack-selection "
			;;
	 	esac
	echo "${BIND}:5335 -group a -no-speed-check ${BINDIPV6} " >>$DNS_T
	echo "${BIND}:5336 -group e ${BINDIPV6} " >>$DNS_T

	if [ $dns_mode_o = "doh" ];then
		echo $doh_o | sed 's/,/\n/g' | sed -e 's/^/server-https /g' -e 's/$/ -group a  -exclude-default-group/g' >> $DNS_T
		doh_o_dom=$(echo $doh_o | sed 's/,/\n/g' | awk '-F[/:]' '{print$4}' | grep -Ev "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" | grep -Ev "\[[0-9]")
			if [ "$doh_o_dom" ];then
			   for i in $doh_o_dom;do
				case $run_mode in
					router|all)echo "nameserver /$i/b" >> $DNS_T;;
					*)echo "domain-rules /$i/ -nameserver b -ipset blacklist" >> $DNS_T;;
				esac
			   done
			fi
		if [ -n "$NF" ];then
			echo $doh_nf | sed 's/,/\n/g' | sed -e 's/^/server-https /g' -e 's/$/ -group c -exclude-default-group/g' >> $DNS_T
			doh_nf_dom=$(echo $doh_nf | sed 's/,/\n/g' | awk '-F[/:]' '{print$4}' | grep -Ev "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" | grep -Ev "\[[0-9]")

			for i in $doh_nf_dom;do echo "domain-rules /$i/ -nameserver d -ipset netflix" >> $DNS_T;done
		fi
	else
		echo $dot_o | sed 's/,/\n/g' | sed -e 's/^/server-tls /g' -e 's/$/ -group a  -exclude-default-group/g' >> $DNS_T
		dot_o_dom=$(echo $dot_o | sed 's/,/\n/g' | awk '-F[/:]' '{print$1}' | grep -Ev "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" | grep -Ev "\[[0-9]")
		[ "$dot_o_dom" ] && {
			   for i in $dot_o_dom;do
				case $run_mode in
					router|all)echo "nameserver /$i/b" >> $DNS_T;;
					*)echo "domain-rules /$i/ -nameserver b -ipset blacklist" >> $DNS_T;;
				esac
			   done
		}
		[ -n "$NF" ] && {
			echo $dot_nf | sed 's/,/\n/g' | sed -e 's/^/server-https /g' -e 's/$/ -group c -exclude-default-group/g' >> $DNS_T
			dot_nf_dom=$(echo $dot_nf | sed 's/,/\n/g' | awk '-F[/:]' '{print$1}' | grep -Ev "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" | grep -Ev "\[[0-9]")
			for i in $dot_nf_dom;do echo "domain-rules /$i/ -nameserver d -ipset netflix" >> $DNS_T;done
		}
		[ -n "$NF" ] && for i in $dot_dns_nf;do echo "server-tcp $i -group c -exclude-default-group" >>$DNS_T;done
	fi

	echo -e "nameserver /dnsleaktest.com/b\nnameserver /whrq.net/b\nnameserver /speedtest.net/b\nnameserver /ooklaserver.net/b\nnameserver /in-addr.arpa/b" >> $DNS_T
	# echo -e "nameserver /dnsleaktest.com/a\nnameserver /whrq.net/a\nnameserver /speedtest.net/a\nnameserver /ooklaserver.net/a\nnameserver /in-addr.arpa/a" >> $DNS_T
	if [ $dns_mode_d = "doh" ];then
		echo $doh_d | sed 's/,/\n/g' | sed -e 's/^/server-https /g' -e 's/$/ -group e  -exclude-default-group/g' >> $DNS_T
		doh_d_dom=$(echo $doh_d | sed 's/,/\n/g' | awk '-F[/:]' '{print$4}' | grep -Ev "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" | grep -Ev "\[[0-9]")
		[ "$doh_d_dom" ] && for i in $doh_d_dom;do echo "domain-rules /$i/ -nameserver f -ipset ss_spec_wan_ac" >>$DNS_T;done
	elif [ $dns_mode_d = "dot" ];then
		echo $dot_d | sed 's/,/\n/g' | sed -e 's/^/server-https /g' -e 's/$/ -group e  -exclude-default-group/g' >> $DNS_T
		dot_d_dom=$(echo $dot_d | sed 's/,/\n/g' | awk '-F[/:]' '{print$4}' | grep -Ev "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" | grep -Ev "\[[0-9]")
		[ "$dot_d_dom" ] && for i in $dot_d_dom;do echo "domain-rules /$i/ -nameserver f -ipset ss_spec_wan_ac" >>$DNS_T;done
		

	else	
		for i in $udp_d;do  echo "server $i -group e -exclude-default-group" >>$DNS_T;done
	fi
	
	# dns
	for i in $dns;do echo "server-tcp $i -group b" >>$DNS_T;done
	for i in $dns_d;do echo "server $i -group f " >>$DNS_T;done
	# for i in $dns_d;do echo "server $i -group f -bootstrap-dns" >>$DNS_T;done
	for i in $dns_d;do ipset add ss_spec_wan_ac $i 2>/dev/null;done
	
	case $run_mode in
		all)port=5335;;
		gfw|oversea)port=5336;;
		*)port=5337;;
	esac
	cat >$DNS_FILE <<-EOF
		no-resolv
		no-poll
		server=127.0.0.1#$port
	EOF
	if [ $run_mode = oversea ];then
		awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' $T_FILE/oversea.list >$DNS_DIR/oversea.conf
		[ "$dns_a" = 1 ] && echo "server=/$doh_o_dom/127.0.0.1#5335" >>$DNS_DIR/oversea.conf
		[ "$dns_a2" = 1 ] && echo "server=/$dot_o_dom/127.0.0.1#5335" >>$DNS_DIR/oversea.conf
	else
		[ $run_mode != gfw ] && echo -e "server=/msftconnecttest.com/127.0.0.1#5336\nserver=/msftncsi.com/127.0.0.1#5336" >> $DNS_FILE  
		if [ $run_mode != all ];then
			cp -f $T_FILE/black.list $O
			awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' $O >$DNS_DIR/black.conf
			if [ $run_mode = gfw ];then
				[ "$dns_a" = 1 ] && echo "server=/$doh_o_dom/127.0.0.1#5335" >>$DNS_DIR/black.conf
				[ "$dns_a2" = 1 ] && echo "server=/$dot_o_dom/127.0.0.1#5335" >>$DNS_DIR/black.conf
				cp -f $VAR/gfw.list $O
				awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' $O >>$DNS_DIR/black.conf
				echo domain-set -name gfw-domain-rule-list -file $VAR/gfw.list >>$DNS_T   #gfw
				echo domain-rules /domain-set:gfw-domain-rule-list/  -nameserver a -dualstack-ip-selection no -address #6 -ipset blacklist >>$DNS_T
			fi
		fi

		if [ -s $DNS_DIR/black.conf ];then
			[ "$dns_b" = 1 ] && sed -i -e "/\/$doh_nf_dom/d" -e "/\.$doh_nf_dom/d" $DNS_DIR/black.conf
			[ "$dns_b2" = 1 ] && sed -i -e "/\/$dot_nf_dom/d" -e "/\.$dot_nf_dom/d" $DNS_DIR/black.conf
			echo "$(sort -u $DNS_DIR/black.conf)" >$DNS_DIR/black.conf
			sed -e 's/.*=/ipset /g' -e 's/127.0.0.1#5335/blacklist/g' $DNS_DIR/black.conf >$CON_T
		else
			rm -f $DNS_DIR/black.conf
		fi

		if [ -n "$NF" ];then
			cp -f $T_FILE/netflix.list $O
			D=$(cat $O)
			for i in $D;do
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $DNS_DIR/black.conf 2>/dev/null
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $CON_T 2>/dev/null
				echo "domain-rules /$i/ -nameserver c -ipset netflix" >>$CON_T
			done
			if [ $run_mode = gfw ];then
				awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' $O >>$DNS_DIR/black.conf
				[ "$dns_b" = 1 ] && echo "server=/$doh_nf_dom/127.0.0.1#5335" >>$DNS_DIR/black.conf
				[ "$dns_b2" = 1 ] && echo "server=/$dot_nf_dom/127.0.0.1#5335" >>$DNS_DIR/black.conf
			fi
		fi

		[ $run_mode = all -a "$dns_c" = 1 ] && echo "server=/$doh_d_dom/127.0.0.1#5336" >$DNS_DIR/white.conf
		[ $run_mode = all -a "$dns_c2" = 1 ] && echo "server=/$dot_d_dom/127.0.0.1#5336" >$DNS_DIR/white.conf
		if [ -s $T_FILE/white.list ];then
			cp -f $T_FILE/white.list $O
			sed -i "s/\r//g" $O
			D=$(cat $O)
			for i in $D;do
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $DNS_DIR/black.conf 2>/dev/null
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $CON_T 2>/dev/null
			done
			awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5336"'\n",$0)}' $O >>$DNS_DIR/white.conf
			awk '!/^$/&&!/^#/{printf("ipset /%s/'"ss_spec_wan_ac"'\n",$0)}' $O >>$CON_T
		fi
	fi
	[ -s $CON_T ] && echo "conf-file $CON_T" >>$DNS_T
	# no AD 
	ad_samrtdns=$(uci -q get bypass.@global[0].ad_smartdns)
	[[ $ad_samrtdns = 1  &&  -s $T_FILE/ad_smartdns.txt ]] && { 
           cp $T_FILE/ad_smartdns.txt $VAR/ad_smartdns.txt
	   echo "conf-file $VAR/ad_smartdns.txt" >>$DNS_T
	}
	rm -f $O
	[ $(find $DNS_DIR -name \* -exec cat {} \; 2>/dev/null | wc -l) = 0 ] && rm -rf $DNS_DIR
	echo "conf-dir=${DNS_DIR}" >$DNS_FILE
	[ $run_mode = router ] && chinadns_flag=1
	killall -q -9 smartdns
	start_dns
	/etc/init.d/dnsmasq restart >/dev/null 2>&1
	preload
}

start_switch(){
	if [ $(uci_get_by_type global enable_switch 0) = 1 -a -z "$switch_server" ];then
		service_start $BIN_DIR/by-switch start
		switch_enable=1
	fi
}

add_cron(){
	if [ $(uci_get_by_type server_subscribe auto_update 0) = 1 ];then
		if ! grep -wq "$(uci_get_by_type server_subscribe auto_update_time 6) \* \* \* .*$BIN_DIR" $CRON_FILE;then
			eval $CRON
			echo "0 $(uci_get_by_type server_subscribe auto_update_time 6) * * * $BIN_DIR/update" >>$CRON_FILE
			echo "5 $(uci_get_by_type server_subscribe auto_update_time 6) * * * $BIN_DIR/subscribe" >>$CRON_FILE
			/etc/init.d/cron restart
		fi
	fi
}

gen_service_file(){
	[ $(uci_get_by_name $1 fast_open 0) = 1 ] && fast=true || fast=false
	if [ $2 = ss ];then
		cat <<-EOF >$3
			{
			"server":"0.0.0.0",
			"server_port":$port,
			"password":"$pass",
			"timeout":$timeout,
			"method":"$(uci_get_by_name $1 encrypt_method_ss)",
			"fast_open":$fast
			}
		EOF
		plugin=$(uci_get_by_name $1 plugin 0)
		if [ $plugin != 0 -a -x "$(which $plugin)" ];then
			sed -i "s@0.0.0.0\",@0.0.0.0\",\n\"plugin\":\"$plugin\",\n\"plugin_opts\":\"$(uci_get_by_name $1 plugin_opts)\",@" $3
		fi
	else
		cat <<-EOF >$3
			{
			"server":"0.0.0.0",
			"server_port":$port,
			"password":"$pass",
			"timeout":$timeout,
			"method":"$(uci_get_by_name $1 encrypt_method)",
			"protocol":"$(uci_get_by_name $1 protocol)",
			"protocol_param":"$(uci_get_by_name $1 protocol_param)",
			"obfs":"$(uci_get_by_name $1 obfs)",
			"obfs_param":"$(uci_get_by_name $1 obfs_param)",
			"fast_open":$fast
			}
		EOF
	fi
}

run_server(){
	[ $(uci_get_by_name $1 enable 0) = 0 ] && return 1
	let server_count=server_count+1
	[ $server_count = 1 ] && iptables-save -t filter | grep BY-SERVER-RULE >/dev/null || iptables -N BY-SERVER-RULE && iptables -t filter -I INPUT -j BY-SERVER-RULE
	type=$(uci_get_by_name $1 type ssr)
	[ $type = ss -o $type = ssr ] && cmd=$(f_bin $type-server) || cmd=$(which microsocks)
	[ ! -x $cmd ] && log "SSR server: Can't find $cmd program, start failed!" && return 1
	port=$(uci_get_by_name $1 server_port)
	pass=$(uci_get_by_name $1 password)
	name=by-server_$server_count
	case $type in
	ss|ssr)
		timeout=$(uci_get_by_name $1 timeout 60)
		gen_service_file $1 $type $VAR/$name.json
		$cmd -c $VAR/$name.json -u >/dev/null 2>&1 &
		[ $type = ss ] && name=Shadowsocks || name=ShadowsocksR
		log "By server: $name Server$server_count Started!"
		;;
	*)
		if [ $(uci_get_by_name $1 auth_enable 0) = 1 ];then
			username=$(uci_get_by_name $1 username)
			if [ -n "$username" ];then
				param="$([ $(uci_get_by_name $1 auth_once 0) = 1 ] && echo -1) -u $username -P $pass"
			else
				log "By server: Socks5 User and pass must be used together!"
				return 1
			fi
		fi
		$cmd -p $port $param $name >/dev/null 2>&1 &
		log "By server: Socks5 Server$server_count Started!"
		;;
	esac
	iptables -t filter -A BY-SERVER-RULE -p tcp --dport $port -j ACCEPT
	iptables -t filter -A BY-SERVER-RULE -p udp --dport $port -j ACCEPT
	return 0
}

gen_serv_include(){
	[ -s $FWI ] || echo '#!/bin/sh' >$FWI
	extract_rules(){
		echo "*filter"
		iptables-save -t filter | grep BY-SERVER-RULE | sed -e "s/^-A INPUT/-I INPUT/"
		echo 'COMMIT'
	}
	cat <<-EOF >>$FWI
		iptables-save -c | grep -v "SSR-SERVER" | iptables-restore -c
		iptables-restore -n <<-EOT
		$(extract_rules)
		EOT
	EOF
}

start_server(){
	[ $(uci_get_by_type server_global enable_server 0) = 0 ] && return
	[ ! -d $VAR ] && mkdir -p $VAR
	config_load $NAME
	config_foreach run_server server_config
	gen_serv_include
}

start_monitor(){
	if [ $(uci_get_by_type global monitor_enable 0) = 1 ];then
		let total=redir_tcp+kcp_enable+redir_udp+redir_nf+smartdns_flag+chinadns_flag+local_enable+server_count+switch_enable
		[ $total -gt 0 ] && service_start $BIN_DIR/by-monitor $redir_tcp $kcp_enable $redir_udp $redir_nf $smartdns_flag $chinadns_flag $local_enable $server_count
	fi
}

start(){
	touch $LOC
	[ ! -s $LOG ]  && echo '' > $LOG
	if [ -n "$switch_server" ];then
		GLOBAL_SERVER=$switch_server
		switch_enable=1
	fi
	v2txray
	if rules;then
		if start_retcp;then
			[ -n "$UDP_RELAY_SERVER" ] && start_reudp
			[ -n "$NF" ] && start_renf
			gen_dns
			start_switch
			add_cron
		fi
	fi
	[ "$SO_SERVER" -a "$socks5_start" != 1 ] && start_local
	start_server 
	start_monitor
	adbin="$(uci -q get AdGuardHome.AdGuardHome.binpath)"
	if [[ -x /etc/init.d/AdGuardHome && -x "$adbin" ]]; then
		if [[ $adguardhome == 1 && -n "$GLOBAL_SERVER" ]]; then
			if [[ ! "$(netstat -tunlp | grep 53 | grep -i AdGuardHome)" ]]; then
				uci -q del dhcp.@dnsmasq[0].dns_redirect
				sed -i "/dhcp_option '6/d" /etc/config/dhcp
				uci -q add_list dhcp.lan.dhcp_option="6,$(uci -q get network.lan.ipaddr)"
				uci commit dhcp
				adgconf="$(uci -q get AdGuardHome.AdGuardHome.configpath)"
				masqport="$(grep "  port:.*" $adgconf | cut -f 4 -d " ")"
				[ -s $adgconf ] && adgc="$(cat $adgconf | tr '\n' '\r' | sed -e "s/upstream_dns:.*upstream_dns_file/upstream_dns:\n  - 127.0.0.1:$masqport\n  upstream_dns_file/" | tr '\r' '\n')"
				[ ` uci -q get AdGuardHome.AdGuardHome.redirectold ` ] || uci -q set AdGuardHome.AdGuardHome.redirectold="$(uci -q get AdGuardHome.AdGuardHome.redirect)"
				[ -n "$adgc" ] && echo "${adgc}" >$adgconf
				uci -q set AdGuardHome.AdGuardHome.enabled='1'
				uci -q set AdGuardHome.AdGuardHome.redirect='exchange'
				uci commit AdGuardHome
				(sleep 3; /etc/init.d/AdGuardHome restart >/dev/null 2>&1) &
			fi
		elif [ ` uci -q get AdGuardHome.AdGuardHome.redirectold ` ]; then
				uci -q set AdGuardHome.AdGuardHome.enabled='0'
				uci -q set AdGuardHome.AdGuardHome.redirect ="$(uci -q get AdGuardHome.AdGuardHome.redirectold)"
				uci -q del AdGuardHome.AdGuardHome.redirectold
				uci commit AdGuardHome
				/etc/init.d/AdGuardHome stop >/dev/null 2>&1 &
		fi
	elif [ $adguardhome == 1 ]; then
		log "Please ensure that Luci app adguardhome and ADG main program exist in the system!"
	fi
	clean_log 
	rm -f $LOCK $LOC

}

stop(){
	kill -9 $(ps -w | grep by-rules | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep gfw.b64 | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep $BIN_DIR/checknetwork | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep $BIN_DIR/update | grep -v grep | awk '{print$1}') 2>/dev/null
	$BIN_DIR/by-rules -f
	srulecount=$(iptables -nL | grep BY-SERVER-RULE | wc -l)
	if [ $srulecount -gt 0 ];then
		iptables -F BY-SERVER-RULE
		iptables -t filter -D INPUT -j BY-SERVER-RULE
		iptables -X BY-SERVER-RULE 2>/dev/null
	fi
	[ -z "$switch_server" ] && kill -9 $(ps -w | grep by-switch | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep by-monitor | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep by-preload | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep $VAR | grep -v grep | awk '{print$1}') 2>/dev/null
	killall -q -9 smartdns chinadns-ng kcptun-client microsocks

	rm -rf $DNS_DIR $VAR $DNS_FILE $CON_T /tmp/lock/bypass-update.lock
	[ -z "$GLOBAL_SERVER" ] && grep -q bypass $CRON_FILE && sed -i '/bypass/d' $CRON_FILE && /etc/init.d/cron restart
	if [ $STATUS = Y -o -z "$GLOBAL_SERVER" ];then
		if [[ -f /etc/init.d/AdGuardHome && ` uci -q get AdGuardHome.AdGuardHome.redirectold ` ]]; then
			/etc/init.d/AdGuardHome stop >/dev/null 2>&1 &
		fi
		rm -rf $SDNS $PID $LOC
		/etc/init.d/dnsmasq restart >/dev/null 2>&1
		if [ $STATUS = Y -a -z "$GLOBAL_SERVER" ];then
			rm -rf $LOG
		fi
	elif [ -s $DNS_T ];then
		cat > $DNS_T <<-EOF
			speed-check-mode none
			cache-persist no
			cache-size 0
			log-level fatal
			log-file $LOG
			bind :5335
			bind :5336
			bind :5337
		EOF
		if [ $dns_mode_d = doh ];then
			dns_d_l="223.5.5.5 223.6.6.6"
			for i in $dns_d_l;do echo "server-https https://$i/dns-query" >> $DNS_T;done
		else
			ref=/tmp/resolv.conf.d/resolv.conf.auto
			[ -s $ref ] || ref=/tmp/resolv.conf.auto
			dns_d_l=$(cat $ref 2>/dev/null | grep nameserver | awk '{print$2}')
			if [ -z "$dns_d_l" ];then
				log "SmartDNS : Get Domestic DNS failed!"
				exit 1
			fi
			dns_d_l=$(echo $dns_d_l | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
			for i in $dns_d_l;do echo "server $i" >> $DNS_T;done
		fi
		$(which smartdns) -c $DNS_T
		r=1
		while ! ps -w | grep smartdns | grep -v grep >/dev/null;do
			[ $r -ge 10 ] && return 1 || let r++
			sleep 1
		done
	fi

}

restart(){
	[ -f $LOC ] && exit 1
	touch $LOC
	STATUS=N
	stop
	start
}

boot(){
	echo '#!/bin/sh' > $FWI
	touch $LOCK
	start
}
