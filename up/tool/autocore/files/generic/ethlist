#!/usr/bin/lua
-- Copyright (C) 2022 Tianling Shen <cnsztl@immortalwrt.org>
-- Modified for interface type detection by sirpdboy 

local util = require "luci.util"
local fs = require "nixio.fs"
local jsonc = require "luci.jsonc"
local io = require "io"

local eth_info = {}
local interface_map = {}
local uci_output = io.popen("uci show network | grep device"):read("*all")
for line in string.gmatch(uci_output, "([^\n]+)") do
    local key, value = line:match("^(.-)=(.-)$")
    value =value:gsub("%s+'%s*", " "):gsub("%s+'", " "):gsub("'%s*", " ")
    if key and value then
        if key:match("^network%.wan%.device$") then
            local iftype = "WAN"
            local ifname = value:match("^%s*(.-)%s*$")
            interface_map[ifname] = iftype
	    -- print(ifname,iftype )
	else
	    if key:match("^network%.(.-)%.ports$") then 
	           for line in string.gmatch(value, "%S+") do
	              local iftype = "LAN"
	              local ifname = line
	              interface_map[ifname] = iftype
	              -- print(line,iftype )
	           end
	    end
        end
    end
end
io.close()
for ifname, stat in pairs(util.ubus("network.device", "status")) do
    if ifname:match("^(eth%d+)$") == ifname or ifname:match("^(usb%d+)$") or ifname:match("^(lan%d+)$") or ifname:match("wan") == ifname then
        local iftype = interface_map[ifname] or "-"
        local status, speed, duplex, mac
        status = stat.carrier and "yes" or "no"
        if stat.speed == nil or stat.speed:sub(1, 1) == "-" then
                    speed = "-"
        else
             local speed_num = tonumber(stat.speed:sub(1, -2))
	     if speed_num >= 1000 then
        	     speed = string.format("%.0f", speed_num / 1000) .. "Gb/s"
    	     else
   	          speed = string.format("%.0f", speed_num) .. "Mb/s"
  	     end
        end

        if not stat.carrier then
            duplex = "-"
        elseif stat.speed and stat.speed:sub(-1) == "F" then
            duplex = "Full"
        else
            duplex = "Half"
        end
        local mac_file = "/sys/class/net/" .. ifname .. "/address"
        if fs.access(mac_file, "r") then
            mac = fs.readfile(mac_file):trim():upper()
        else
            mac = "-"
        end
        eth_info[#eth_info + 1] = {
            status = status,
            name = iftype .. "[" .. ifname .. "]",
            duplex = duplex,
            speed = speed,
            mac = mac
        }
    end
end
table.sort(eth_info, function(a, b) return a.name < b.name end)

print(jsonc.stringify(eth_info))
