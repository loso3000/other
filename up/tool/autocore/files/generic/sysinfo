#!/bin/sh
# Author=sirpdboy

user() {
    wans=$(ip route 2>/dev/null |grep -c '^default') && arps=$(cat /proc/net/arp 2>/dev/null | grep -c '0x2') && echo "$((arps-wans))"
}

archinfo() {
. /etc/openwrt_release
if grep -Eq "x86" "/etc/openwrt_release" ; then
	[ ! -d /sys/firmware/efi ] &&  echo -n "BIOS" || echo -n "UEFI"
fi
}

memory() {
free | grep Mem | awk '{a=$2/1000;b=(a>800)?a/1000:a;c=(a>800)?"G":"M"} {printf("%0.f%s\n",b,c)}' 
}

cntime() {
    awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60;d=($1%60)} {printf("%d 天 %d 小时 %d 分钟 %d 秒\n",a,b,c,d)}' /proc/uptime
}

time() {
date "+%A [%W] | [%j] %Y/%m/%d-%X %Z"
}

cpuinfo() {
 
. /etc/openwrt_release

CPUINFO_PATH="/proc/cpuinfo"
CPUFREQ_PATH="/sys/devices/system/cpu/cpufreq"
THERMAL_PATH="/sys/class/thermal"

cpu_arch="$(awk -F ': ' '/model name/ {print $2}' "$CPUINFO_PATH" | head -n1)"
[ -n "${cpu_arch}" ] || cpu_arch="ARMv8 Processor"

case "$DISTRIB_TARGET" in
"x86"/*)
	cpu_cores="$(grep "core id" "$CPUINFO_PATH" | sort -u | wc -l)核 $(grep -c "processor" "$CPUINFO_PATH")线程" ;;
*)
	cpu_cores="$(grep -c "processor" "$CPUINFO_PATH")" ;;
esac

case "$DISTRIB_TARGET" in
"bcm27xx"/*)
	cpu_freq="$(( $(vcgencmd measure_clock arm | awk -F '=' '{print $2}') / 1000000 | awk -F '.' '{print $1}'  ))Mhz" ;;
"bcm53xx"/*)
	cpu_freq="$(nvram get clkfreq | awk -F ',' '{print $1}')MHz" ;;
"mvebu/cortexa72")
	cpu_freq="$(awk '{printf("%.fMHz", $0 / 1000)}' "$CPUFREQ_PATH/policy0/cpuinfo_cur_freq")"
	big_cpu_freq="$(awk '{printf("%.fMHz ", $0 / 1000)}' "$CPUFREQ_PATH/policy2/cpuinfo_cur_freq")"
	;;
"mvebu"/*)
	cpu_freq="$(mhz | awk -F 'cpu_MHz=' '{printf("%.fMHz",$2)}')" ;;
"rockchip"/*)
	cpu_freq="$(awk '{printf("%.fMHz", $0 / 1000)}' "$CPUFREQ_PATH/policy0/cpuinfo_cur_freq")"
	[ ! -e "$CPUFREQ_PATH/policy4/cpuinfo_cur_freq" ] || \
		big_cpu_freq="$(awk '{printf("%.fMHz ", $0 / 1000)}' "$CPUFREQ_PATH/policy4/cpuinfo_cur_freq")"
	;;
"x86"/*)
	cpu_freq="$(awk -F ': ' '/MHz/ {print $2}' "$CPUINFO_PATH" | head -n1 | awk -F '.' '{print $1}' )MHz" ;;
*)
	[ ! -e "$CPUFREQ_PATH/policy0/cpuinfo_cur_freq" ] || \
		cpu_freq="$(awk '{printf("%.fMHz", $0 / 1000)}' "$CPUFREQ_PATH/policy0/cpuinfo_cur_freq")"
	;;
esac
	if [ -d /sys/devices/cpu_atom/ ]; then
    pcore=$(cat /sys/devices/cpu_core/cpus | awk -F- '{print $2}') 
    pc=$(echo "($pcore+1)/2" | bc) 
    ecore1=$(cat /sys/devices/cpu_atom/cpus | awk -F- '{print $1}') 
    ecore2=$(cat /sys/devices/cpu_atom/cpus | awk -F- '{print $2}')
    ec=$(echo "$ecore2-$ecore1+1" | bc) 
    hydrid='('${pc}'P+'${ec}'E)'
  fi
if [ -n "$big_cpu_freq$cpu_freq" ] || grep -Eq "ipq|mt7622" "/etc/openwrt_release"; then
	echo -n "$cpu_arch x $cpu_cores (主频：$big_cpu_freq$cpu_freq) $hydrid"
else
	echo -n "$cpu_arch x $cpu_cores $hydrid"
fi
}

cpuspeed() {
CPUINFO_PATH="/proc/cpuinfo"
CPUFREQ_PATH="/sys/devices/system/cpu/cpufreq"
RELEASE_PATH="/etc/openwrt_release"
if grep -q "bcm27xx" "${RELEASE_PATH}"; then
	cpu_freq="$( $(vcgencmd measure_clock arm | awk -F '=' '{print $2}') / 1000000  | awk -F '.' '{print $1}' ) )Mhz" 
elif grep -q "bcm53xx" "${RELEASE_PATH}"; then
	cpu_freq="$(nvram get clkfreq | awk -F ',' '{print $1}')MHz"
elif grep -q "mvebu" "${RELEASE_PATH}"; then
	cpu_freq="$(cat "$CPUINFO_PATH" | awk -F':' '/BogoMIPS/ {print $2}' | head -n1 | awk -F '.' '{print $1}' )MHz" 
elif grep -q "ramips" "${RELEASE_PATH}"; then
	cpu_freq="$(cat "$CPUINFO_PATH" | awk -F':' '/BogoMIPS/ {print $2}' | head -n1 | awk -F '.' '{print $1}' )MHz" 
elif grep -q "x86" "${RELEASE_PATH}"; then
	cpu_freq="$(cat "$CPUINFO_PATH" | awk -F':' '/MHz/ {print $2}' | head -n1 | awk -F '.' '{print $1}' )MHz" 
        # cpu_freq=`grep 'MHz' /proc/cpuinfo | cut -c11- |sed -n '1p' | awk -F '.' '{print $1}' `MHz
elif ! grep -q "filogic" "${RELEASE_PATH}"; then
	[ -e "${CPUFREQ_PATH}/policy0/cpuinfo_cur_freq" ] && cpu_freq="$(expr $(cat /sys/devices/system/cpu/cpufreq/policy0/cpuinfo_cur_freq) / 1000)MHz"
	[ -e "${CPUFREQ_PATH}/policy4/cpuinfo_cur_freq " ] && big_cpu_freq="$(expr $(cat /sys/devices/system/cpu/cpufreq/policy4/cpuinfo_cur_freq 2>"/dev/null") / 1000 2>"/dev/null")"
	[ -n "${big_cpu_freq}" ] && big_cpu_freq="${big_cpu_freq}MHz "
fi
if grep -Eq "ipq|mt7622" "${RELEASE_PATH}" ; then
	echo -n "${cpu_freq}"
else
	echo -n "${big_cpu_freq}${cpu_freq}"
fi

}
url() {
	URL=$(awk '{print $4}' /proc/version | cut -d '@' -f2 2> /dev/null | cut -d ')' -f1)
	if [ "$(echo -n ${URL} | grep -q 'http' ; echo $?)" = 0 ]
	then
		echo ${URL}
	fi
}

tempinfo(){

IEEE_PATH="/sys/class/ieee80211"
THERMAL_PATH="/sys/class/thermal"
. /etc/openwrt_release
if grep -Eq "x86" "/etc/openwrt_release" || grep -Eq "bcm27xx" "/etc/openwrt_release"  ; then
case "$DISTRIB_TARGET" in
"bcm27xx"/*)
	cpu_temp="$(vcgencmd measure_temp | awk -F '=' '{print $2}' | awk -F "'" '{print $1}')°C" ;;
"x86"/*)
	if grep -q "GenuineIntel" "/proc/cpuinfo"; then
		cpu_temp="$(sensors "coretemp-*" 2>"/dev/null" | grep -E "(Package id |Core )" | grep -Eo "\+[0-9.]*°C" | head -n1 | tr -d "+")"
	elif grep -q "AuthenticAMD" "/proc/cpuinfo"; then
		cpu_temp=`sensors 'k*temp-*' 2>/dev/null | awk '/Tdie/ {print $2}' | head -n1 | tr -d "+"`
		[ -n "${cpu_temp}" ] || cpu_temp=`sensors 2>/dev/null | grep -E 'temp1'  | grep -Eo "\+[0-9]*.[0-9]" | head -n1 | tr -d "+"`
		[ -n "${cpu_temp}" ] || cpu_temp=`sensors  2>/dev/null | grep -E 'Tctl'  | grep -Eo "\+[0-9]*.[0-9]" | head -n1 | tr -d "+"`
	fi
	;;
*)
	[ ! -e "$THERMAL_PATH/thermal_zone0/temp" ] || \
		cpu_temp="$(awk '{printf("%.1f°C", $0 / 1000)}' "$THERMAL_PATH/thermal_zone0/temp")"
	;;
esac
    echo -n "${cpu_temp}"
else
	if grep -Eq "ipq40xx|ipq806x" "/etc/openwrt_release"; then
		[ ! -e "${IEEE_PATH}/phy*/device/hwmon/hwmon*/temp1_input" ] || \
		wifi_temp="$(awk '{printf("%.1f°C ", $0 / 1000)}' "${IEEE_PATH}"/phy*/device/hwmon/hwmon*/temp1_input | awk '$1=$1')"
	else
		[ ! -e "${IEEE_PATH}/phy*/hwmon*/temp1_input" ] || \
		wifi_temp="$(awk '{printf("%.1f°C ", $0 / 1000)}' "${IEEE_PATH}"/phy*/hwmon*/temp1_input | awk '$1=$1')"
	fi
	[ -n "${wifi_temp}" ] && wifitemp=" ，WiFi：${wifi_temp}"  || wifitemp=''
	if grep -q "ipq40xx" "/etc/openwrt_release"; then
		if [ -e "$IEEE_PATH/phy0/hwmon0/temp1_input" ]; then
			mt76_temp=` awk -F ': ' '{print $2}' "${THERMAL_PATH}/phy0/hwmon0/temp1_input" 2>/dev/null`"°C"
		fi
		echo -n "WiFi:${mt76_temp} ${wifitemp}"
	else
		[ ! -e "$THERMAL_PATH/thermal_zone0/temp" ] || \
		cpu_temp=`awk '{printf("%.1f°C", $0 / 1000)}' "${THERMAL_PATH}/thermal_zone0/temp" 2>/dev/null`
		echo -n "CPU: ${cpu_temp} ${wifitemp}"
	fi
fi
}

upnpinfo() {
    if [ "$(uci get upnpd.config.enabled)" != 1 ]
    then
        echo "Not Enabled"
        return
    fi
    upnp_lease=$(uci get upnpd.config.upnp_lease_file)
    cat ${upnp_lease} 2> /dev/null | wc -l
}

ethinfo() {
    [ ! -d /tmp/state ] && mkdir -p /tmp/state 2>/dev/null
    sed -i '/_orig_ifname/d' /etc/config/network
    {
    echo -n "["
    for i in $(ip address | awk -F ': ' '/eth[0-9]+/ {print $2}' | awk -F '@' {'print $1'} | awk '{ if ( length($0) <=7 ) print $0}' | xargs)
    do
	h=$(echo '{"name":' )
	d=$(ethtool $i)
	name=$(uci show network | grep "$i" | head -n1 |awk -F '.'  '{print $2}' | awk -F '_'  '{print $1}')
	[ $name == '@device[0]' ] && name=$(uci get network.$name.name | awk -F '-' '{print $2}')
	m=$(ifconfig | grep "$i" | head -n1 | awk -F 'HWaddr ' '{print $2}')
	e=$(echo "$d" | grep "Link detected" | awk -F: '{printf $2}' | sed 's/^[ \t]*//g')
	f=$(echo "$d" |grep Speed | awk '{print $2/1000 " Gb/s"}' | sed 's/^[ \t]*//g' | tr -d "Unknown!")
	[ -z "$f" -o "$f" = "0 Gb/s" ] && f="- Gb/s"
	[ $i == "eth0" -a "$f" = "- Gb/s"  ]  && f="10 Gb/s"  
	g=$(echo "$d" | grep "Duplex" | awk -F: '{printf $2}' | sed 's/^[ \t]*//g')
	echo -n "$h \"$name[$i]\", \"status\": \"$e\", \"duplex\": \"$g\", \"speed\": \"$f\", \"mac\": \"$m\"},"
    done
    echo -n "]" 
    } > /tmp/state/ethinfo
    cat /tmp/state/ethinfo
}

$*
