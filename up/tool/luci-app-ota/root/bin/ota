#!/bin/sh

. /etc/os-release
. /lib/functions/uci-defaults.sh

function ECHO() {
	local Color
	if [[ ! $1 ]]
	then
		echo -ne "\n${Grey}[$(date "+%H:%M:%S")]${White} "
	else
		while [[ $1 ]];do
			case $1 in
			r | g | b | y | x | w)
				case $1 in
				r) Color="${Red}";;
				g) Color="${Green}";;
				b) Color="${Blue}";;
				y) Color="${Yellow}";;
				x) Color="${Grey}";;
				w) Color="${White}";;
				esac
				shift
			;;
			*)
				Message=$1
				break
			;;
			esac
		done
		echo -e "\n${Grey}[$(date "+%H:%M:%S")]${White}${Color} ${Message}${White}"
		LOGGER "${Message}"
	fi
}

WRLOCK=/var/lock/otaez_background.lock
STLOCK=/var/lock/otaez_status.lock


action=${1}
shift

md5() {
    md5sum $1 | cut -d' ' -f1
}

# alias fcurl='curl -L --fail --show-error'
alias fcurl='curl --connect-timeout 20 --max-time 60 '


function LOGGER() {
		[[ ! -d ${LogPath} ]] && mkdir -p ${LogPath}
		[[ ! -f ${LogFull} ]] && touch -f ${LogFull}
		echo "[$(date "+%H:%M:%S")] [$0] $*" >> ${LogFull}
}

function RM() {
	for i in $@
	do
		rm -r "$i" 2> /dev/null
		LOGGER "删除文件: [$i]"
	done
}

function SHOWOTA_API() {

    # fcurl -o ${ApiFile} "$proxy${GithubAPI}"  
    fcurl -o ${ApiFile} "$proxy${GithubAPI}"  >/dev/null 2>&1 
    [[ ! -s ${ApiFile} ]] && {
		ECHO r "未检测到 API 文件!"
		return 1
    }

	for i in $(seq 0 $(jq ".[]|length" ${ApiFile} | wc -l));do
		eval name=$(jq ".[${i}].assets[0].name" ${ApiFile} 2> /dev/null)
		[[ `echo $name | grep $OS_ARCH | grep $AUTHVER ` ]] || continue
		case ${name} in
		 *img.gz )
			eval browser_download_url=$(jq ".[${i}].assets[0].browser_download_url" ${ApiFile} 2> /dev/null)
			eval size=$(jq ".[${i}].assets[0].size" ${ApiFile} 2> /dev/null | awk '{a=$1/1048576} {printf("%.2f\n",a)}')
			eval updated_at=$(jq ".[${i}].assets[0].updated_at" ${ApiFile} 2> /dev/null | sed 's/[-:TZ]//g')
			eval download_count=$(jq ".[${i}].assets[0].download_count" ${ApiFile} 2> /dev/null)
			[[ ! ${browser_download_url} || ${browser_download_url} == null ]] && continue
			[[ ! ${size} || ${size} == null || ${size} == 0 ]] && size="-" || size="${size}MB"
			[[ ! ${updated_at} || ${updated_at} == null ]] && updated_at="-"
			[[ ! ${download_count} || ${download_count} == null ]] && download_count="-"
			printf "%-75s %-5s %-10s %-15s %s\n" ${name} ${download_count} ${updated_at} ${size} ${browser_download_url} >> ${ApiInfo}
			return
		;;
		esac
	done
	unset i
}

function SHOW_INFO() {
	local Info Type Result
	[[ ! -s ${ApiInfo} ]] && {
		ECHO r "未检测到 API 文件!"
		return 1
	}
	Info=$(grep " " ${ApiInfo} | awk 'BEGIN {MAX = 0} {if ($4+0 > MAX+0) {MAX=$4 ;content=$0} } END {print content}')
	Result="$(echo $Info | awk '{print $"'${1}'"}'  2> /dev/null)"
	case $1 in
	1) Type="固件名称";;
	2) Type="下载次数";;
	3) Type="发布日期" ;;
	4) Type="固件体积";;
	5) Type="固件链接";;
	*) Type="未定义信息";;
	esac
	[[ ! ${Result} == "-" ]] && {
		LOGGER "${Type}: ${Result}"
		echo -e "${Result}"
	} || {
		LOGGER "${Type}获取失败!"
		return 1
	}
}



ota_init(){
    mkdir -p $TmpPath >/dev/null 2>&1 || true
}

download() {
    SHOWOTA_API
    local sum=$1
    exec 300>$STLOCK
    flock 300
    touch /tmp/firmware.img.part
    echo >/tmp/firmware.img.progress
    rm -f /tmp/firmware.img.md5
    flock -u 300
    if [ -f /tmp/firmware.img ]; then
        echo "Checking existed firmware.img..." >> /tmp/firmware.img.progress
        if [ "`md5 /tmp/firmware.img`" = "$sum" ]; then
            flock 300
            echo $sum > /tmp/firmware.img.md5;
            rm -f /tmp/firmware.img.part
            rm -f /tmp/firmware.img.progress
            flock -u 300
            return 0;
        else
            echo "Check failed, redownload" >> /tmp/firmware.img.progress
            rm -f /tmp/firmware.img
        fi
    fi
    local pid url
        url=$(SHOW_INFO 5)
        echo "Try $url" >>/tmp/firmware.img.progress
        flock 300
        echo "#=#=#" >>/tmp/firmware.img.progress
        fcurl  --progress-bar -o /tmp/firmware.img.part "$url" 2>>/tmp/firmware.img.progress &
        pid="$!"
        echo "$pid" > ${TmpPath}/download.pid
        flock -u 300
        if wait $pid; then
            rm -f ${TmpPath}/download.pid
            echo "Checking new firmware.img.part..." > /tmp/firmware.img.progress
            if [ "`md5 /tmp/firmware.img.part`" = "$sum" ]; then
                flock 300
                mv /tmp/firmware.img.part /tmp/firmware.img && echo $sum > /tmp/firmware.img.md5
                rm -f /tmp/firmware.img.progress
                flock -u 300
                return 0
            else
                echo "Checksum failed!" >>/tmp/firmware.img.progress
            fi
        else
            local ecode=$?
            echo >>/tmp/firmware.img.progress
            if [ $ecode -eq 143 ]; then
                echo "Canceled!" >> /tmp/firmware.img.progress
                break
            fi
        fi
        flock 300
        sed -i '/\r/d' /tmp/firmware.img.progress
        flock -u 300
    rm -f ${Tmp_Path}/download.pid
    rm -f /tmp/firmware.img.part
    return 1
}

lock_download() {
    local lock="$WRLOCK"
    exec 200>$lock
    flock -n 200 || return
    download $1
    flock -u 200
}

prepare_check() {
    cat /dev/null > $LogFull
    eval ez_version=`cat /etc/ezopenwrt_version | cut -d _ -f 1 `
    [ -z "$ez_version" ]  && {
         echo "$ez_version 检查错误:非sirpdboy固件,不支持在线升级！"
	 return 3
     }
    SHOWOTA_API
    CLOUD_FW_Name=$(SHOW_INFO 1)
    CLOUD_FW_Count=$(SHOW_INFO 2)
    CLOUD_FW_Date=$(SHOW_INFO 3)
    CLOUD_FW_Size=$(SHOW_INFO 4)
    CLOUD_FW_Url=$(SHOW_INFO 5)
    eval cloud_version=`echo ${CLOUD_FW_Url##*download/} | cut -d / -f 1`
    [ -z  ${cloud_version} ] && eval cloud_version=$(jq ".[0].assets[0].browser_download_url" ${ApiFile} 2> /dev/null) && eval cloud_version=`echo ${cloud_version##*download/} | cut -d / -f 1`
    [ -z  ${cloud_version} ] && {
         echo "检查错误:网络不通，请检查网络连接状态!"
	 return 255
     }
    eval md5url=`echo $Github/releases/download/$(echo ${CLOUD_FW_Url##*download/} | cut -d / -f 1)/EzOpWrt_dev-efi.md5`
    fcurl -o ${MD5File}   $proxy$Github/releases/download/$(echo ${CLOUD_FW_Url##*download/} | cut -d / -f 1)/EzOpWrt_dev-efi.md5  >/dev/null 2>&1 
    fcurl -o ${verFile}   $proxy$Github/releases/download/$(echo ${CLOUD_FW_Url##*download/} | cut -d / -f 1)/ver.latest  >/dev/null 2>&1 || { rm -f ${verFile} ; return 255; }
    fcurl -o ${footFile}   $proxy$Github/releases/download/$(echo ${CLOUD_FW_Url##*download/} | cut -d / -f 1)/ota.footer  >/dev/null 2>&1 || { rm -f ${footFile} ; return 255; }

    [[ ! -s "$MD5File"  ]] &&{
        eval md5url=$(jq ".[0].assets[1].browser_download_url" ${ApiFile} 2> /dev/null)
        fcurl -o ${MD5File}  "$proxy$md5url"  >/dev/null 2>&1 
    }
    [[ ! -s ${MD5File} ]] && {
		echo "未检测到 MD5 文件!"
		return 255
    }

    eval summd5=`head -1 "$MD5File" | awk -F " " '{print $1}' |sed '/^$/d'`
    [ -z  ${summd5} ] && {
         echo "检查错误:无MD5校验码!"
	 return 255
     }
    eval CLOUD_FW_IP=`head -2 "$MD5File" | awk -F "=" '{print $2}'  |sed '/^$/d'` 
    [ -z "$CLOUD_FW_IP" ]  && CLOUD_FW_IP="192.168.1.1"
     if [ "$ez_version" != "$cloud_version" ];then
         echo "<h3>机器型号:&nbsp;&nbsp;<font color=\"green\">$OS_ARCH</font><br/>当前版本:&nbsp;&nbsp;<font color=\"green\">$ez_version</font></h3>"
         echo "<br/><h3>云端版本:&nbsp;&nbsp;<font color=\"green\">$cloud_version</font><br/>固件日期:&nbsp;&nbsp;<font color=\"green\">$(echo $CLOUD_FW_Date | sed 's/\(....\)\(..\)\(..\)\(..\)\(..\)\(..\)/\1-\2-\3 \4:\5:\6/')</font><br/>固件大小:&nbsp;&nbsp;<font color=\"green\">$CLOUD_FW_Size</font><br/>下载次数:&nbsp;&nbsp;<font color=\"green\">$CLOUD_FW_Count</font><br/>固件 IP :&nbsp;&nbsp;<font color='green'>$CLOUD_FW_IP</font><br/>MD5 值:&nbsp;&nbsp;<font color=\"green\">$summd5</font></h3>"
         latest=0
      else
         latest=1
     fi 
    [ "`wc -l ${verFile} | cut -d' ' -f1`" -eq 0 ] && return 255
    return $latest
}

# 0: found newer fw, 1: already newest fw, 2: found running task, *: err
do_check() {
    local ret=0
    local lock="$WRLOCK"
    exec 200>$lock
    if flock -n 200; then
        prepare_check
        ret=$?
        flock -u 200 >/dev/null 2>&1
    elif [ -f /tmp/firmware.img.progress ]; then
        ret=2
    else
        echo "lock failed!" >&2
        return 255
    fi
    if [ "$ret" -eq 0 -o "$ret" -eq 2 ]; then
        # output
        echo "<pre>"
        sed -E '1 s/^\[.*\]\((.+)\)\s*$/\1/'  ${verFile} 
        echo "</pre>"
    fi
    [ "$ret" -eq 0 -o "$ret" -eq 1 -o "$ret" -eq 2 ] && {
         [[ -s ${footFile} ]] &&  {
            # output
        echo "<pre>"
        sed -E '1 s/^\[.*\]\((.+)\)\s*$/\1/'  ${footFile} 
        echo "</pre>"
        } 
        echo "<h3><font color=\"red\"> About :<a href=\"$Github/\" onclick=\"void(0)\" target=\"_blank\">Sirpdboy Firmware</a></font></h3>"
    }

    return $ret
}

# async download
do_download(){
    eval sum=`head -1 "$MD5File" | awk -F " " '{print $1}'  |sed '/^$/d'`
    [ -z "$sum" ] && { echo "do check first" >&2 ; return 254; }
    lock_download $sum &
    return 0
}

# 0: done, 1: downloading, 2: failed, 254: wrong state, *: err
do_progress() {
    eval sum=`head -1 "$MD5File" | awk -F " " '{print $1}' |sed '/^$/d'`
    [ -z "$sum" ] && { echo "do check first" >&2 ; return 254; }
    [ -f /tmp/firmware.img.md5 ] && [ "`cat /tmp/firmware.img.md5`" = "$sum" ] && return 0
    [ -f /tmp/firmware.img.progress ] || { echo "download not in progress" >&2 ; return 254; }
    [ -f /tmp/firmware.img.part ] && { cat /tmp/firmware.img.progress | tr '\r' '\n' | tail -n1; return 1; }
    tail -1 /tmp/firmware.img.progress | grep -Fq 'Canceled!' && { echo "Canceled"; return 2; }
    cat /tmp/firmware.img.progress | tr '\r' '\n' | grep -v '^$' | tail -n1 >&2
    return 3
}

do_progress_locked() {
    local ret
    exec 300>$STLOCK
    flock -s 300
    do_progress
    ret=$?
    flock -u 300
    return $ret
}

do_cancel() {
    if [ -f ${TmpPath}/download.pid ]; then
        local pid=`cat ${TmpPath}/download.pid`
        if [ -n "$pid" ]; then
            kill -TERM $pid;
            while kill -0 $pid >/dev/null 2>&1; do
                if ! sleep 1; then
                    break
                fi
            done
        fi
    fi
    return 0
}

usage() {
    echo "usage: ota sub-command"
    echo "where sub-command is one of:"
    echo "      check                  Check firmware upgrade"
    echo "      download               Download latest firmware"
    echo "      progress               Download progress"
    echo "      cancel                 Cancel download"
}


LogPath=/tmp
LogFile=ezota.log
TmpPath=/var/run/ezota
ApiFile="${TmpPath}/Api_File"
ApiInfo="${TmpPath}/Api_Info"
MD5File="${TmpPath}/MD5_File"
verFile="${TmpPath}/ver.latest"
footFile="${TmpPath}/ota.footer"
FirmwareAuthor="sirpdboy/openwrt"
Github="https://github.com/${FirmwareAuthor}"
GithubAPI="https://api.github.com/repos/${FirmwareAuthor}/releases"
LogFull="${LogPath}/${LogFile}"
AUTHVER=`cat /etc/ezopenwrt_version | cut -d - -f 1-2`
eval OS_ARCH=`cat /etc/os-release |grep OPENWRT_ARCH | cut -d = -f 2`
proxy=""
google_status=$(curl -I -4 -m 3 -o /dev/null -s -w %{http_code} http://www.google.com/generate_204)
# [ "$google_status" -ne "204" ] && proxy="https://ghproxy.com/"
[ "$google_status" -ne "204" ] && proxy="https://gh.404delivr.workers.dev/"
ota_init || exit 255

case $action in
    "check")
        do_check
    ;;
    "download")
        do_download
    ;;
    "progress")
        do_progress_locked
    ;;
    "cancel")
        do_cancel
    ;;
    *)
        usage
    ;;
esac
