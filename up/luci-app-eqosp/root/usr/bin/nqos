#!/bin/bash 

# Copyright (C) 2006 OpenWrt.org
# Copyright 2022-2023 sirpdboy <herboy2008@gmail.com>

crrun=$1
crid=$2
NAME=nqos
LOCK="/var/lock/$NAME.lock"
if [ x$(uci get $NAME.@$NAME[0].ifname) = 'x1' ] ;then
     dev=`ifconfig | grep "Point-to-Point" | cut -d " " -f1`
     [ ! $dev ] && dev=` uci -q get network.wan.ifname ` || dev=` uci -q get network.wan.device ` 
     [ ! $dev ] && dev=br-lan
else
     dev=`uci -q get $NAME.@$NAME[0].ifname `
fi
# [ x$(uci get $NAME.@$NAME[0].forced) = 'x1' ] && forced="default $id" || forced='default 999'
# lanipaddr=$(uci -q get network.lan.ipaddr 2>/dev/null | awk -F '.' '{print $1"."$2"."$3".0/24"}')

help()
{
	cat <<EOF
Syntax: nqos [command]

Available commands:
EOF
	command_help "start" "Start nqos rules"
	command_help "stop" "Stop nqos rules"
}

bin_nft=$(which nft)
bin_ebtables=$(which ebtables)
bin_nft-qos=$(which nft-qos)

# Uncomment this to debug commands
DEBUG=1
## End
# Debug functions - echo + run

dbg_nft() {
	[ "${DEBUG:-0}" -eq 0 ] || echo D: nft "$@"
	$bin_nft "$@" 
}

dbg_ebtables() {
	[ "${DEBUG:-0}" -eq 0 ] || echo D: ebtables "$@"
	$bin_ebtables "$@" 
}

dbg_nft-qos() {
	[ "${DEBUG:-0}" -eq 0 ] || echo D: nft-qos "$@"
	$bin_nft-qos "$@" 
}

is_macaddr() {
    ret=1
    if echo "$1" | grep -qE '^([0-9A-Fa-f]{2}[-:]){5}[0-9A-Fa-f]{2}$'; then
        ret=0
    fi
    return $ret
}

# Default commands
iptables="dbg_iptables"
ip6tables="dbg_ip6tables"
nft="dbg_nft"
nftqos="dbg_nft-qos"
ebt="dbg_ebtables"

ipt(){
	$iptables $@
	$ip6tables $@
}

stop_nqos() {
	# $ebt -t filter -F FORWARD 2>/dev/null
	$nft flush ruleset 2>/dev/null
	$nftqos stop
}

init_nqos() {
	$nft add table inet filter
	$nft add chain inet filter input { type filter hook input priority 0 \; }
	$nft add chain inet filter output { type filter hook output priority 0 \; }
	$nft add chain inet filter forward { type filter hook forward priority 0 \; }
}

# Define dynamic rules
mac_rule() {
    i=$1
    mac=$2
    rule=$3  #add  delete
    DL=$(uci -q get $NAME.@device[$i].download 2>/dev/null | awk '{print $1*10^3}')
    UL=$(uci -q get $NAME.@device[$i].upload   2>/dev/null | awk '{print $1*10^3}')
    time_start=$(uci -q get $NAME.@device[$i].timestart 2>/dev/null) || time_start="00:00"
    time_end=$(uci -q get $NAME.@device[$i].timeend 2>/dev/null) ||  time_end="00:00"
    week=$(uci -q get $NAME.@device[$i].week  |sed 's/ /,/g' 2>/dev/null) || week="*"
    if [ -z "$time_start" -o -z "$time_end" -o "$time_start" = "$time_end" ] ;then 
         WT="" 
    else
     	[[ "$time_start" < "$time_end" ]] && WT=" meta time hour >= $time_start meta time hour <= $time_end " || WT=" meta time hour >= $time_end meta time hour <= $time_start "
    fi
    [ -z "$week" -o "$week" = "*" ] && WEEK="" || WEEK=" meta time day >= $week "
    $nft $rule rule inet filter input meta iifname $dev ether saddr $mac $WT $WEEK limit rate "$DL"kbit accept
    $nft $rule rule inet filter output meta oifname $dev ether daddr $mac $WT $WEEK limit rate "$UL"kbit accept
}

ip_rule() {
    i=$1
    mac=$2
    rule=$3  #add  delete
    DL=$(uci -q get $NAME.@device[$i].download 2>/dev/null | awk '{print $1*10^3}')
    UL=$(uci -q get $NAME.@device[$i].upload   2>/dev/null | awk '{print $1*10^3}')
    time_start=$(uci -q get $NAME.@device[$i].timestart 2>/dev/null) || time_start="00:00"
    time_end=$(uci -q get $NAME.@device[$i].timeend 2>/dev/null) ||  time_end="00:00"
    week=$(uci -q get $NAME.@device[$i].week  |sed 's/ /,/g' 2>/dev/null) || week="*"
    if [ -z "$time_start" -o -z "$time_end" -o "$time_start" = "$time_end" ] ;then 
         WT="" 
    else
     	[[ "$time_start" < "$time_end" ]] && WT=" meta time hour >= $time_start meta time hour <= $time_end " || WT=" meta time hour >= $time_end meta time hour <= $time_start "
    fi
    [ -z "$week" -o "$week" = "*" ] && WEEK="" || WEEK=" meta time day >= $week "
    $nft $rule rule inet filter input meta iifname $dev ip saddr $mac $WT $WEEK limit rate "$DL"kbit accept
    $nft $rule rule inet filter output meta oifname $dev ip daddr $mac $WT $WEEK limit rate "$UL"kbit accept
}

check_list() {
	i=$1
	re=0
	time_start=$(uci -q get $NAME.@device[$i].timestart 2>/dev/null) || time_start="00:00"
	time_end=$(uci -q get $NAME.@device[$i].timeend 2>/dev/null) ||  time_end="00:00"
	wweek=$(uci -q get $NAME.@device[$i].week  |sed 's/ /,/g' 2>/dev/null) ||  wweek="*"
	current_time=$(date +%H:%M)
	current_weekday=$(date +%u)
	[ "$time_start" = "$time_end" ] || { 
	[[ "$time_start" < "$time_end" ]] && { [[ "$current_time" > "$time_start" ]] && [[ "$current_time" < "$time_end" ]] || return ; }
	[[ "$time_start" > "$time_end" ]] && { [[ "$current_time" < "$time_start" ]] && [[ "$current_time" > "$time_end" ]] || return ; }
	}
	for ww in `echo $wweek | sed 's/,/ /g' | sed 's/-/ /g'`; do 
		if [ $current_weekday = $ww ] || [ "x*" = "x$ww" ] ; then 
		      re=1
		fi
	done
	return $re
}

stop(){
	/etc/init.d/$NAME disable
	stop_nqos
}

restart() {
	/etc/init.d/$NAME enable
	/etc/init.d/$NAME stop
	/etc/init.d/$NAME start
}

start(){
	idlist=`uci show $NAME | grep "enable='1'" | grep "device" | grep -oE '\[.*?\]' | grep -o '[0-9]'`
	[ ! $idlist ] && /etc/init.d/$NAME stop
	init_nqos
	for i in `echo $idlist | sed -e 's/!//g' ` ;do
		if check_list $i ;then
			mac=$(uci -q get $NAME.@device[$i].mac )
			if is_macaddr $mac; then
			    mac_rule $i $mac 'add'
			else
			    [ -n `echo $mac | grep '-' ` ] && mac=`echo $mac | awk -F '[.-]' '{if ($5=="") print $1"."$2"."$3"."$4 ; else if ($8=="" && $4<$5) print $1"."$2"."$3"."$4"-"$1"."$2"."$3"."$5 ; else if ($8=="" && $4>$5) print $1"."$2"."$3"."$5"-"$1"."$2"."$3"."$4 ; else if ($8>$4) print $1"."$2"."$3"."$4"-"$1"."$2"."$3"."$8 ; else if ($8<$4) print $1"."$2"."$3"."$8"-"$1"."$2"."$3"."$4}' `
			    ip_rule $i $mac 'add'
			fi
		else
			if is_macaddr $mac; then
			    mac_rule $i $mac 'delete'
			else
			    [ -n `echo $mac | grep '-' ` ] && mac=`echo $mac | awk -F '[.-]' '{if ($5=="") print $1"."$2"."$3"."$4 ; else if ($8=="" && $4<$5) print $1"."$2"."$3"."$4"-"$1"."$2"."$3"."$5 ; else if ($8=="" && $4>$5) print $1"."$2"."$3"."$5"-"$1"."$2"."$3"."$4 ; else if ($8>$4) print $1"."$2"."$3"."$4"-"$1"."$2"."$3"."$8 ; else if ($8<$4) print $1"."$2"."$3"."$8"-"$1"."$2"."$3"."$4}' `
			    ip_rule $i $mac 'delete'
			fi
		fi
	done
}

case "$1" in
	start|stop|restart)
		$*
	;;
	*)
		help
	;;
esac

exit 0
